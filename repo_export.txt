

===== .\src\main\java\com\whiteboard\client\CreateWhiteBoard.java =====
package com.whiteboard.client;

import javax.swing.*;
import java.rmi.RemoteException;

// CreateWhiteBoard.java
public class CreateWhiteBoard {
    public static void main(String[] args) {
        if (args.length < 3) {
            System.err.println("Usage: java CreateWhiteBoard <serverIPAddress> <serverPort> <username>");
            System.exit(1); // 直接退出，不显示UI
        }

        String serverIP = args[0];
        String serverPortStr = args[1];
        String username = args[2];

        int serverPort;
        try {
            serverPort = Integer.parseInt(serverPortStr);
        } catch (NumberFormatException e) {
            System.err.println("Invalid port number: " + serverPortStr);
            System.exit(1);
            return; // 让编译器知道程序会退出
        }

        System.out.println("Connecting to server at " + serverIP + ":" + serverPort + " as " + username);

        try {
            // 请求作为管理员连接
            WhiteboardClient client = new WhiteboardClient(username, serverIP, serverPort, true);
            // 连接成功，客户端会自动显示UI
        } catch (RemoteException | RuntimeException e) {
            System.err.println("Error connecting to server: " + e.getMessage());

            // 显示错误对话框，但提供明确的选择
            String[] options = {"Run in Local Mode", "Exit"};
            int choice = JOptionPane.showOptionDialog(
                    null,
                    "Failed to connect to server at " + serverIP + ":" + serverPort +
                    "\n\nError: " + e.getMessage() +
                    "\n\nWould you like to run in local mode instead?",
                    "Connection Failed",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null,
                    options,
                    options[1] // 默认选择 "Exit"
            );

            if (choice == 0) { // Run in Local Mode
                try {
                    System.out.println("Starting in local mode...");
                    new WhiteboardClient(username, true);
                } catch (RemoteException ex) {
                    System.err.println("Error creating local client: " + ex.getMessage());
                    JOptionPane.showMessageDialog(null,
                            "Failed to start local mode: " + ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    System.exit(1);
                }
            } else {
                // 用户选择退出
                System.out.println("User chose to exit.");
                System.exit(0);
            }
        }
    }
}



===== .\src\main\java\com\whiteboard\client\JoinWhiteBoard.java =====
package com.whiteboard.client;

import javax.swing.*;
import java.rmi.RemoteException;

public class JoinWhiteBoard {
    public static void main(String[] args) {
        if (args.length < 3) {
            System.err.println("Usage: java JoinWhiteBoard <serverIPAddress> <serverPort> <username>");
            System.exit(1); // 直接退出，不显示UI
        }

        String serverIP = args[0];
        String serverPortStr = args[1];
        String username = args[2];

        int serverPort;
        try {
            serverPort = Integer.parseInt(serverPortStr);
        } catch (NumberFormatException e) {
            System.err.println("Invalid port number: " + serverPortStr);
            System.exit(1);
            return; // 让编译器知道程序会退出
        }

        System.out.println("Connecting to server at " + serverIP + ":" + serverPort + " as " + username);

        try {
            // 请求作为普通用户连接
            WhiteboardClient client = new WhiteboardClient(username, serverIP, serverPort, false);
            // 连接成功，客户端会自动显示UI
        } catch (RemoteException | RuntimeException e) {
            System.err.println("Error connecting to server: " + e.getMessage());

            // 显示错误对话框，但提供明确的选择
            String[] options = {"Run in Local Mode", "Exit"};
            int choice = JOptionPane.showOptionDialog(
                    null,
                    "Failed to connect to server at " + serverIP + ":" + serverPort +
                    "\n\nError: " + e.getMessage() +
                    "\n\nWould you like to run in local mode instead?",
                    "Connection Failed",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.ERROR_MESSAGE,
                    null,
                    options,
                    options[1] // 默认选择 "Exit"
                );

            if (choice == 0) { // Run in Local Mode
                try {
                    System.out.println("Starting in local mode...");
                    new WhiteboardClient(username, false);
                } catch (RemoteException ex) {
                    System.err.println("Error creating local client: " + ex.getMessage());
                    JOptionPane.showMessageDialog(null,
                            "Failed to start local mode: " + ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    System.exit(1);
                }
            } else {
                // 用户选择退出
                System.out.println("User chose to exit.");
                System.exit(0);
            }
        }
    }
}

===== .\src\main\java\com\whiteboard\client\WhiteboardClient.java =====
package com.whiteboard.client;

import com.whiteboard.client.shapes.Shape;
import com.whiteboard.client.ui.WhiteboardFrame;
import com.whiteboard.common.remote.IWhiteboardClient;
import com.whiteboard.common.remote.IWhiteboardServer;

import javax.swing.*;
import java.io.Serializable;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Logger;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;



public class WhiteboardClient extends UnicastRemoteObject implements IWhiteboardClient, Serializable {
    private static final Logger logger = Logger.getLogger(WhiteboardClient.class.getName());

    private WhiteboardFrame frame = null;
    private IWhiteboardServer server;
    private String username;
    private String sessionId;
    private boolean isManager;
    private boolean isConnected = false;
    private String currentFilename = null;
    private volatile boolean uiInitialized = false;
    private Timer heartbeatTimer;
    private Timer joinRequestTimer;
    private boolean isApproved = false;

    private JDialog joinWaitingDialog;

    private volatile boolean approved = false;
    private final Object approvalLock = new Object();

    // 缓存未处理的更新
    private final List<Shape> pendingShapes = new ArrayList<>();
    private final List<String> pendingShapeRemovals = new ArrayList<>();
    private List<String> pendingUserList = null;
    private final List<ChatMessage> pendingMessages = new ArrayList<>();
    private Boolean pendingManagerDecision = null;
    private boolean pendingManagerLeft = false;
    private boolean pendingKicked = false;
    private boolean pendingClearCanvas = false;

    // 预览相关
    private Timer previewTimer;
    private Shape currentPreviewShape;

    private static class ChatMessage {
        final String sender;
        final String message;

        ChatMessage(String sender, String message) {
            this.sender = sender;
            this.message = message;
        }
    }

    /**
     * 本地模式构造函数（不连接服务器）
     */
    public WhiteboardClient(String username, boolean isManager) throws RemoteException {
        this.username = username;
        this.isManager = isManager;

        // 初始化UI
        initializeUI();
    }

    /**
     * 连网模式构造函数（请求作为管理员连接）
     */

    public WhiteboardClient(String username, String serverAddress, int serverPort, boolean requestAsManager) throws RemoteException {
        this.username = username;

        try {
            // 连接服务器
            connectToServer(serverAddress, serverPort, requestAsManager);

            // 初始化UI
            initializeUI();

    } catch (RuntimeException e) {
        // 将 RuntimeException 转换为 RemoteException 向上抛出
        logger.severe("Error initializing client: " + e.getMessage());
        throw new RemoteException("Failed to initialize client", e);
    } catch (Exception e) {
        logger.severe("Error initializing client: " + e.getMessage());
        throw new RemoteException("Failed to initialize client", e);
    }
}

    /**
     * 连接到服务器
     */
    private void connectToServer(String serverAddress, int serverPort, boolean requestAsManager) {
        try {
            // 获取RMI注册表
            Registry registry = LocateRegistry.getRegistry(serverAddress, serverPort);

            // 查找服务器
            server = (IWhiteboardServer) registry.lookup("WhiteboardServer");


            // 连接用户
            sessionId = server.connectUser(username, requestAsManager);

        // 如果返回null，表示连接被拒绝
        if (sessionId == null) {
            String errorMsg = requestAsManager ?
                "Connection rejected: Another manager is already connected." :
                "Connection rejected by server.";

            // 抛出 RuntimeException 而不是 RemoteException，让调用者处理
            throw new RuntimeException(errorMsg);
        }

            // 确定管理员状态
            isManager = server.isManager(sessionId);
            isConnected = true;

            // 启动心跳
            startHeartbeat();

        // 如果不是管理员，显示等待对话框并启动加入请求
        if (!isManager) {
            createWaitingDialog();
            startJoinRequestTimer();
        } else {
            isApproved = true; // 管理员自动批准
        }

        logger.info("Connected to server as " + (isManager ? "manager" : "regular user") +
                ", isApproved=" + isApproved);
    } catch (RemoteException | NotBoundException e) {
        logger.severe("Could not connect to server: " + e.getMessage());
        isConnected = false;
        // 抛出 RuntimeException，让调用者处理UI显示和程序退出
        throw new RuntimeException("Failed to connect to server: " + e.getMessage(), e);
    }
}


    /**
     * 初始化UI
     */
    private void initializeUI() {
        SwingUtilities.invokeLater(() -> {
            String title = "Distributed Whiteboard - " + username + (isManager ? " (Manager)" : "");
            frame = new WhiteboardFrame(title, isManager, this);

            // 设置白板面板的绘图事件监听器
            frame.getWhiteboardPanel().setDrawingListener(shape -> {
                if (isConnected && (isManager || isApproved)) {
                    try {
                        server.addShape(shape, sessionId);
                    } catch (RemoteException e) {
                        logger.warning("Error sending shape to server: " + e.getMessage());
                    }
                }
            });

            frame.setVisible(true);

            processPendingUpdates();

            // 标记UI已初始化
            uiInitialized = true;

            // 如果是管理员或已批准，注册客户端回调
            if (isConnected) {
                // Always register client callback if connected
                if (isConnected) {
                    try {
                        server.registerClient(sessionId, this);
                        logger.info("Registered client callback with server");

                        // If manager or already approved, get current state
                        if (isManager || isApproved) {
                            // Get current shapes
                            List<Shape> shapes = server.getAllShapes();
                            for (Shape shape : shapes) {
                                frame.getWhiteboardPanel().addShape(shape);
                            }

                            // Get user list
                            List<String> users = server.getConnectedUsers();
                            frame.updateUserList(users);
                        }
                    } catch (RemoteException e) {
                        logger.warning("Error registering client: " + e.getMessage());
                    }
                }
            }

            // 处理所有挂起的更新
            processPendingUpdates();
        });
    }

    /**
     * 处理挂起的更新
     */
    private void processPendingUpdates() {
        if (!uiInitialized || frame == null) {
            return;
        }

        // 处理挂起的形状
        synchronized (pendingShapes) {
            for (Shape shape : pendingShapes) {
                frame.getWhiteboardPanel().addShape(shape);
            }
            pendingShapes.clear();
        }

        // 处理挂起的形状移除
        synchronized (pendingShapeRemovals) {
            for (String shapeId : pendingShapeRemovals) {
                frame.getWhiteboardPanel().removeShape(shapeId);
            }
            pendingShapeRemovals.clear();
        }

        // 处理挂起的用户列表
        if (pendingUserList != null) {
            frame.updateUserList(pendingUserList);
            pendingUserList = null;
        }

        // 处理挂起的聊天消息
        synchronized (pendingMessages) {
            for (ChatMessage msg : pendingMessages) {
                frame.addChatMessage(msg.sender, msg.message);
            }
            pendingMessages.clear();
        }

        // 处理挂起的管理员决定
        if (pendingManagerDecision != null) {
            boolean approved = pendingManagerDecision;
            pendingManagerDecision = null;

            if (approved) {
                JOptionPane.showMessageDialog(frame,
                        "Your request to join has been approved",
                        "Request Approved",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(frame,
                        "Your request to join has been rejected",
                        "Request Rejected",
                        JOptionPane.WARNING_MESSAGE);
                System.exit(0);
            }
        }

        // 处理挂起的管理员离开
        if (pendingManagerLeft) {
            pendingManagerLeft = false;
            JOptionPane.showMessageDialog(frame,
                    "The manager has left the session. The application will now close.",
                    "Session Ended",
                    JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

        // 处理挂起的踢出
        if (pendingKicked) {
            pendingKicked = false;
            JOptionPane.showMessageDialog(frame,
                    "You have been kicked out by the manager.",
                    "Kicked Out",
                    JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }

        // 处理挂起的清除画布
        if (pendingClearCanvas) {
            pendingClearCanvas = false;
            frame.getWhiteboardPanel().clearCanvas();
        }
    }

    // IWhiteboardClient 接口实现
    @Override
    public void updateShape(Shape shape) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.getWhiteboardPanel().addShape(shape);
            });
        } else {
            // 缓存更新
            synchronized (pendingShapes) {
                pendingShapes.add(shape);
            }
            logger.info("Cached shape update: " + shape.getId());
        }
    }

    @Override
    public void removeShape(String shapeId) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.getWhiteboardPanel().removeShape(shapeId);
            });
        } else {
            // 缓存更新
            synchronized (pendingShapeRemovals) {
                pendingShapeRemovals.add(shapeId);
            }
            logger.info("Cached shape removal: " + shapeId);
        }
    }

    @Override
    public void updateUserList(List<String> users) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.updateUserList(users);
            });
        } else {
            // 缓存更新
            pendingUserList = new ArrayList<>(users);
            logger.info("Cached user list update");
        }
    }

    @Override
    public void receiveMessage(String senderName, String message) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.addChatMessage(senderName, message);
            });
        } else {
            // 缓存更新
            synchronized (pendingMessages) {
                pendingMessages.add(new ChatMessage(senderName, message));
            }
            logger.info("Cached chat message from " + senderName);
        }
    }

    @Override
    public void notifyManagerDecision(boolean approved) throws RemoteException {
        logger.info("Received manager decision: " + (approved ? "Approved" : "Rejected"));

        // 立即设置批准状态
        this.isApproved = approved;

        // 立即停止请求定时器
        if (joinRequestTimer != null) {
            joinRequestTimer.cancel();
            joinRequestTimer = null;
            logger.info("Join request timer stopped after manager decision");
        }

        // 关闭等待对话框（重要！）
        if (joinWaitingDialog != null && joinWaitingDialog.isVisible()) {
            SwingUtilities.invokeLater(() -> {
                joinWaitingDialog.dispose();
                joinWaitingDialog = null;

                if (frame != null) {
                    frame.setEnabled(true); // 重新启用主窗口
                }
            });
        }

        // 在UI线程中显示通知
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                if (approved) {
                    JOptionPane.showMessageDialog(frame,
                            "Your request to join has been approved",
                            "Request Approved",
                            JOptionPane.INFORMATION_MESSAGE);

                    // 关键修改: 批准后立即注册客户端回调并获取当前状态
                    registerAfterApproval();
                } else {
                    JOptionPane.showMessageDialog(frame,
                            "Your request to join has been rejected",
                            "Request Rejected",
                            JOptionPane.WARNING_MESSAGE);

                    // 拒绝后5秒关闭
                    Timer closeTimer = new Timer();
                    closeTimer.schedule(new TimerTask() {
                        @Override
                        public void run() {
                            System.exit(0);
                        }
                    }, 5000);
                }
            });
        } else {
            // 缓存批准通知，但立即处理批准后的注册
            pendingManagerDecision = approved;

            if (approved) {
                // 即使UI未初始化也尝试注册
                registerAfterApproval();
            } else if (!approved) {
                // 被拒绝时退出
                System.exit(0);
            }
        }
    }

    @Override
    public void notifyManagerLeft() throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(frame,
                        "The manager has left the session. The application will now close.",
                        "Session Ended",
                        JOptionPane.WARNING_MESSAGE);
                System.exit(0);
            });
        } else {
            // 缓存更新
            pendingManagerLeft = true;
            logger.info("Cached manager left notification");
        }
    }

    @Override
    public void notifyKicked() throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(frame,
                        "You have been kicked out by the manager.",
                        "Kicked Out",
                        JOptionPane.WARNING_MESSAGE);
                System.exit(0);
            });
        } else {
            // 缓存更新
            pendingKicked = true;
            logger.info("Cached kick notification");
        }
    }

    @Override
    public void receiveClearCanvas() throws RemoteException {
    logger.info("Received clear canvas command from server");

        // Process immediately if UI is ready
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                try {
                    logger.info("Clearing canvas on UI thread");
                    frame.getWhiteboardPanel().clearCanvas();
                    logger.info("Canvas cleared successfully");
                } catch (Exception e) {
                    logger.severe("Error clearing canvas: " + e.getMessage());
                    e.printStackTrace();
                }
            });
        } else {
            // 缓存更新
            pendingClearCanvas = true;
            logger.info("Cached clear canvas notification (UI not ready)");
        }
    }

    // 其他方法保持不变...

    /**
     * 发送形状到服务器
     */
    public void sendShape(Shape shape) {
        if (isConnected) {
            try {
                logger.info("Sending shape to server: " + shape.getId());
                server.addShape(shape, sessionId);
            } catch (RemoteException e) {
                logger.warning("Error sending shape to server: " + e.getMessage());
                handleConnectionError(e);
            }
        }
    }

    /**
     * 发送聊天消息
     */
    public void sendChatMessage(String message) {
        if (isConnected) {
            try {
                logger.info("Sending chat message: " + message);
                server.sendChatMessage(message, sessionId);
                // 在本地显示自己的消息
//                if (uiInitialized && frame != null) {
//                    frame.addChatMessage("Me", message);
//                }
            } catch (RemoteException e) {
                logger.warning("Error sending chat message: " + e.getMessage());
                handleConnectionError(e);
            }
        }
    }

    /**
     * 断开连接
     */
    public void disconnect() {
        if (isConnected) {
            try {
                server.disconnectUser(sessionId);
                isConnected = false;
                logger.info("Disconnected from server");
            } catch (RemoteException e) {
                logger.warning("Error disconnecting from server: " + e.getMessage());
            }
        }
    }

    /**
     * 处理连接错误
     */
    private void handleConnectionError(Exception e) {
        isConnected = false;
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(frame,
                        "Lost connection to server: " + e.getMessage(),
                        "Connection Error",
                        JOptionPane.ERROR_MESSAGE);
            });
        } else {
            logger.severe("Lost connection to server: " + e.getMessage());
        }
    }

    /**
     * 踢出用户
     */
    public boolean kickUser(String username) {
        if (isConnected && isManager) {
            try {
                return server.kickUser(username, sessionId);
            } catch (RemoteException e) {
                logger.warning("Error kicking user: " + e.getMessage());
                handleConnectionError(e);
            }
        }
        return false;
    }

    /**
     * 新建白板
     */
    public boolean newWhiteboard() {
        if (isConnected && isManager) {
            try {
                server.clearCanvas(sessionId);
                currentFilename = null;

                // 显示成功消息
                if (uiInitialized && frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame,
                                "New whiteboard created successfully.",
                                "New Whiteboard",
                                JOptionPane.INFORMATION_MESSAGE);
                    });
                }
                return true;
            } catch (RemoteException e) {
                logger.warning("Error creating new whiteboard: " + e.getMessage());
                handleConnectionError(e);
            }
        }
        return false;
    }

    /**
     * 保存白板
     */
    public boolean saveWhiteboard() {
        if (!isConnected || !isManager) {
            return false;
        }

        // 如果有当前文件名，直接保存
        if (currentFilename != null && !currentFilename.trim().isEmpty()) {
            try {
                boolean success = server.saveWhiteboard(currentFilename, sessionId);
                if (success) {
                    // 显示成功消息
                    if (uiInitialized && frame != null) {
                        SwingUtilities.invokeLater(() -> {
                            JOptionPane.showMessageDialog(frame,
                                    "Whiteboard saved successfully.",
                                    "Save Successful",
                                    JOptionPane.INFORMATION_MESSAGE);
                        });
                    }
                } else {
                    // 显示错误消息
                    if (uiInitialized && frame != null) {
                        SwingUtilities.invokeLater(() -> {
                            JOptionPane.showMessageDialog(frame,
                                    "Failed to save whiteboard.",
                                    "Save Failed",
                                    JOptionPane.ERROR_MESSAGE);
                        });
                    }
                }
                return success;
            } catch (RemoteException e) {
                logger.warning("Error saving whiteboard: " + e.getMessage());
                handleConnectionError(e);
                return false;
            }
        } else {
            // 如果没有当前文件名，调用另存为
            return saveWhiteboardAs(null);
        }
    }

    /**
     * 另存为
     */
    /**
     * 另存为
     */
    public boolean saveWhiteboardAs(String filename) {
        if (!isConnected || !isManager) {
            return false;
        }

        // Save As 总是弹出对话框，即使传入了文件名
        String inputFilename = JOptionPane.showInputDialog(frame,
                "Enter filename:",
                "Save Whiteboard As",
                JOptionPane.PLAIN_MESSAGE);

        if (inputFilename == null || inputFilename.trim().isEmpty()) {
            return false; // 用户取消
        }

        final String finalFilename = inputFilename.trim();

        try {
            boolean success = server.saveWhiteboard(finalFilename, sessionId);
            if (success) {
                this.currentFilename = finalFilename; // 更新当前文件名

                // 显示成功消息
                if (uiInitialized && frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame,
                                "Whiteboard saved successfully as: " + finalFilename,
                                "Save As Successful",
                                JOptionPane.INFORMATION_MESSAGE);
                    });
                }
            } else {
                // 显示错误消息
                if (uiInitialized && frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame,
                                "Failed to save whiteboard as: " + finalFilename,
                                "Save As Failed",
                                JOptionPane.ERROR_MESSAGE);
                    });
                }
            }
            return success;
        } catch (RemoteException e) {
            logger.warning("Error saving whiteboard: " + e.getMessage());
            handleConnectionError(e);
            return false;
        }
    }

    /**
     * 加载白板
     */
    /**
     * 加载白板
     */
    public boolean loadWhiteboard(String filename) {
        if (!isConnected || !isManager) {
            return false;
        }

        // 如果没有提供文件名，弹出对话框
        if (filename == null) {
            filename = JOptionPane.showInputDialog(frame,
                    "Enter filename to load:",
                    "Load Whiteboard",
                    JOptionPane.PLAIN_MESSAGE);

            if (filename == null || filename.trim().isEmpty()) {
                return false; // 用户取消
            }
            filename = filename.trim();
        }

        // 创建final副本供lambda使用
        final String finalFilename = filename;

        try {
            boolean success = server.loadWhiteboard(finalFilename, sessionId);
            if (success) {
                this.currentFilename = finalFilename;

                // 显示成功消息
                if (uiInitialized && frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame,
                                "Whiteboard loaded successfully: " + finalFilename,
                                "Load Successful",
                                JOptionPane.INFORMATION_MESSAGE);
                    });
                }
            } else {
                // 显示错误消息
                if (uiInitialized && frame != null) {
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(frame,
                                "Failed to load whiteboard: " + finalFilename + "\nFile may not exist.",
                                "Load Failed",
                                JOptionPane.ERROR_MESSAGE);
                    });
                }
            }
            return success;
        } catch (RemoteException e) {
            logger.warning("Error loading whiteboard: " + e.getMessage());
            handleConnectionError(e);
            return false;
        }
    }

    /**
     * 检查是否有文件名
     */
    public boolean hasFilename() {
        return currentFilename != null;
    }

    /**
     * 初始化心跳机制
     */
    private void startHeartbeat() {
        if (heartbeatTimer != null) {
            heartbeatTimer.cancel();
        }

        heartbeatTimer = new Timer(true);
        heartbeatTimer.scheduleAtFixedRate(new TimerTask() {
            private int failureCount = 0;
            private final int MAX_FAILURES = 3;

            @Override
            public void run() {
                if (isConnected) {
                    try {
                        // 发送心跳
                        server.updateUserActivity(sessionId);
                        failureCount = 0; // 重置失败计数
                        logger.fine("Heartbeat sent successfully");
                    } catch (RemoteException e) {
                        failureCount++;
                        logger.warning("Heartbeat failed (" + failureCount + "/" + MAX_FAILURES + "): " + e.getMessage());

                        if (failureCount >= MAX_FAILURES) {
                            logger.severe("Multiple heartbeat failures, treating as disconnected");
                            handleConnectionError(e);
                            heartbeatTimer.cancel();
                        }
                    }
                }
            }
        }, 3000, 3000); // 每3秒发送一次心跳，更频繁的检测
    }

    /**
     * 初始化加入请求定时器
     */
    private void startJoinRequestTimer() {
        if (joinRequestTimer != null) {
            joinRequestTimer.cancel();
        }

        joinRequestTimer = new Timer(true);
        joinRequestTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (isConnected && !isApproved && !isManager) {
                    sendJoinRequest();
                } else if (isApproved || isManager) {
                    joinRequestTimer.cancel();
                }
            }
        }, 0, 5000); // 每5秒发送一次请求
    }

    /**
     * 发送加入请求
     */
    private void sendJoinRequest() {
        // 关键修改: 增加对批准状态的明确检查
        if (!isApproved) {
            if (isConnected && !isManager && server != null) {
                try {
                    logger.info("Sending join request, approved=" + isApproved);
                    server.requestJoin(username, sessionId);
                } catch (RemoteException e) {
                    logger.warning("Error sending join request: " + e.getMessage());
                    handleConnectionError(e);
                }
            }
        } else {
            // 已批准，确保停止定时器
            if (joinRequestTimer != null) {
                logger.info("Cancelling join request timer as user is already approved");
                joinRequestTimer.cancel();
                joinRequestTimer = null;
            }
        }
    }

    /**
     * 实现新增的通知方法：待处理的加入请求
     */
    @Override
    public void notifyPendingJoinRequest(String username, boolean isOnline) throws RemoteException {
        if (uiInitialized && frame != null && isManager) {
            SwingUtilities.invokeLater(() -> {
                frame.showJoinRequest(username, isOnline);
            });
        }
    }

    /**
     * 实现新增的通知方法：服务器断开连接
     */
    @Override
    public void notifyServerDisconnected() throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(frame,
                        "Lost connection to server. The application will close in 5 seconds.",
                        "Server Disconnected",
                        JOptionPane.ERROR_MESSAGE);

                // 5秒后关闭应用
                Timer closeTimer = new Timer();
                closeTimer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        System.exit(0);
                    }
                }, 5000);
            });
        }
    }

    /**
     * 实现心跳响应方法
     */
    @Override
    public void heartbeat() throws RemoteException {
        // 心跳响应，无需具体操作
    }

    /**
     * 批准用户加入
     */
    public boolean approveUser(String username) {
        if (isConnected && isManager) {
            try {
                return server.approveUser(username, sessionId);
            } catch (RemoteException e) {
                logger.warning("Error approving user: " + e.getMessage());
                handleConnectionError(e);
            }
        }
        return false;
    }

    /**
     * 拒绝用户加入
     */
    public boolean rejectUser(String username) {
        if (isConnected && isManager) {
            try {
                server.rejectUser(username, sessionId);
                return true;
            } catch (RemoteException e) {
                logger.warning("Error rejecting user: " + e.getMessage());
                handleConnectionError(e);
            }
        }
        return false;
    }

    /**
     * 新增方法: 批准后注册回调
     */
    private void registerAfterApproval() {
        if (isConnected && isApproved && server != null) {
            try {
                // 注册客户端回调
                server.registerClient(sessionId, this);
                logger.info("Successfully registered client for updates after approval");

                // 获取当前白板状态
                List<Shape> shapes = server.getAllShapes();
                if (shapes != null && !shapes.isEmpty()) {
                    logger.info("Received " + shapes.size() + " shapes from server");

                    if (uiInitialized && frame != null) {
                        SwingUtilities.invokeLater(() -> {
                            for (Shape shape : shapes) {
                                frame.getWhiteboardPanel().addShape(shape);
                            }
                        });
                    } else {
                        // 缓存形状
                        synchronized (pendingShapes) {
                            pendingShapes.addAll(shapes);
                        }
                    }
                }

                // 获取用户列表
                List<String> users = server.getConnectedUsers();
                if (users != null && !users.isEmpty()) {
                    logger.info("Received user list with " + users.size() + " users");

                    if (uiInitialized && frame != null) {
                        SwingUtilities.invokeLater(() -> {
                            frame.updateUserList(users);
                        });
                    } else {
                        pendingUserList = new ArrayList<>(users);
                    }
                }
            } catch (RemoteException e) {
                logger.severe("Error registering client after approval: " + e.getMessage());
                // 不抛出异常，确保UI流程继续
            }
        }
    }

    /**
     * 新增方法: 创建非模态等待对话框
     */
    private void createWaitingDialog() {
        SwingUtilities.invokeLater(() -> {
            // 首先找到主窗口，作为父窗口
            Frame parent = null;
            if (frame != null) {
                parent = frame;
            }

            // 创建模态对话框
            JDialog waitingDialog = new JDialog((Frame)null, "Waiting for Approval", true);
            waitingDialog.setLayout(new BorderLayout());

            JPanel panel = new JPanel(new BorderLayout(10, 10));
            panel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));

            JLabel message = new JLabel("Waiting for manager's approval...");
            panel.add(message, BorderLayout.CENTER);

            JButton cancelButton = new JButton("Cancel");
            cancelButton.addActionListener(e -> {
                int response = JOptionPane.showConfirmDialog(
                        waitingDialog,
                        "Are you sure you want to cancel joining?",
                        "Cancel Join Request",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE
                );

                if (response == JOptionPane.YES_OPTION) {
                    // 断开连接并退出
                    disconnect();
                    System.exit(0);
                }
            });

            JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            buttonPanel.add(cancelButton);
            panel.add(buttonPanel, BorderLayout.SOUTH);

            waitingDialog.add(panel);
            waitingDialog.pack();
            waitingDialog.setLocationRelativeTo(frame); // 居中显示
            waitingDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            waitingDialog.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    cancelButton.doClick(); // 模拟点击取消按钮
                }
            });

            // 存储引用
            joinWaitingDialog = waitingDialog;

            // 由于模态对话框会阻塞 EDT 线程，所以在新线程中显示它
            new Thread(() -> {
                waitingDialog.setVisible(true);
            }).start();
        });
    }

    /**
     * Send clear canvas command to server
     */
    public void clearCanvas() {
        if (isConnected && isManager) {
            try {
                System.out.println("Sending clear canvas command to server...");
                server.clearCanvas(sessionId);
                System.out.println("Clear canvas command sent successfully");
            } catch (RemoteException e) {
                logger.warning("Error sending clear canvas command: " + e.getMessage());
                handleConnectionError(e);
            }
        } else {
            logger.warning("Only managers can clear the canvas");
            throw new RuntimeException("Only managers can clear the canvas");
        }
    }

    public boolean isManager() {
        return isManager;
    }


    // preview相关方法
    @Override
    public void receivePreviewUpdate(Shape previewShape, String fromUser) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.getWhiteboardPanel().updatePreview(previewShape, fromUser);
            });
        }
    }

    @Override
    public void receivePreviewClear(String fromUser) throws RemoteException {
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                frame.getWhiteboardPanel().clearPreview(fromUser);
            });
        }
    }

    // 发送预览更新
    public void sendPreviewUpdate(Shape shape) {
        if (isConnected && (isManager || isApproved)) {
            try {
                server.updatePreview(shape, sessionId);
            } catch (RemoteException e) {
                logger.warning("Error sending preview update: " + e.getMessage());
            }
        }
    }

    // 清除预览
    public void clearPreview() {
        if (isConnected && (isManager || isApproved)) {
            try {
                server.clearPreview(sessionId);
            } catch (RemoteException e) {
                logger.warning("Error clearing preview: " + e.getMessage());
            }
        }
    }

    @Override
    public void notifyDuplicateUsername(String username) throws RemoteException {
        logger.warning("Duplicate username detected: " + username);

        // 停止心跳和加入请求
        if (heartbeatTimer != null) {
            heartbeatTimer.cancel();
            heartbeatTimer = null;
        }
        if (joinRequestTimer != null) {
            joinRequestTimer.cancel();
            joinRequestTimer = null;
        }

        // 关闭等待对话框
        if (joinWaitingDialog != null && joinWaitingDialog.isVisible()) {
            SwingUtilities.invokeLater(() -> {
                joinWaitingDialog.dispose();
                joinWaitingDialog = null;
            });
        }

        // 显示错误并退出
        if (uiInitialized && frame != null) {
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(frame,
                        "Username '" + username + "' is already connected to the whiteboard.\nConnection request rejected.",
                        "Duplicate Username",
                        JOptionPane.ERROR_MESSAGE);

                // 2秒后退出，给用户时间看到消息
                Timer exitTimer = new Timer();
                exitTimer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        System.exit(0);
                    }
                }, 2000);
            });
        } else {
            // UI未初始化，直接退出
            System.err.println("Username '" + username + "' is already connected. Exiting.");
            System.exit(0);
        }
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\ErasureShape.java =====
package com.whiteboard.client.shapes;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;
@Deprecated
public class ErasureShape extends Shape {
    private List<Point> path;
    private int eraserSize;

    public ErasureShape(List<Point> path, int eraserSize, Color backgroundColor) {
        // 起点和终点使用路径的首尾点
        super(path.get(0), path.get(path.size()-1), backgroundColor, eraserSize);
        this.path = new ArrayList<>(path);
        this.eraserSize = eraserSize;
    }

    @Override
    public void draw(Graphics2D g) {
        // 保存原始设置
        Stroke originalStroke = g.getStroke();
        Color originalColor = g.getColor();

        // 设置擦除参数
        g.setColor(getDrawColor());
        g.setStroke(new BasicStroke(eraserSize, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));

        // 绘制路径
        for (int i = 0; i < path.size() - 1; i++) {
            Point p1 = path.get(i);
            Point p2 = path.get(i + 1);
            g.drawLine(p1.x, p1.y, p2.x, p2.y);
        }

        // 恢复原始设置
        g.setStroke(originalStroke);
        g.setColor(originalColor);
    }

    @Override
    public boolean contains(Point p) {
        // 擦除形状不需要被选中/检测，返回false
        return false;
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\FreeDrawing.java =====
package com.whiteboard.client.shapes;


import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class FreeDrawing extends Shape {
    private static final long serialVersionUID = 1L;

    private List<Point> points;

    public FreeDrawing(Point start, Color color, int strokeWidth) {
        super(start, start, color, strokeWidth);
        points = new ArrayList<>();
        points.add(start);

        System.out.println("FreeDrawing created with color: " + color + " (RGB: " + color.getRGB() + ")");
    }

    public void addPoint(Point p) {
        points.add(p);
        endPoint = p;
    }

    @Override
    public void draw(Graphics2D g) {
        if (points.size() < 2) {
            // 如果只有一个点，绘制一个小圆点
            if (points.size() == 1) {
                Point p = points.get(0);
                g.setColor(getDrawColor());
                g.fillOval(p.x - strokeWidth/2, p.y - strokeWidth/2, strokeWidth, strokeWidth);
            }
            return;
        }

        // 保存原始设置
        Stroke originalStroke = g.getStroke();
        Color originalColor = g.getColor();

        try {
            // 设置绘制属性
            g.setColor(getDrawColor());
            g.setStroke(new BasicStroke(strokeWidth, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));

            // 绘制路径
            for (int i = 0; i < points.size() - 1; i++) {
                Point p1 = points.get(i);
                Point p2 = points.get(i + 1);
                g.drawLine(p1.x, p1.y, p2.x, p2.y);
            }
        } finally {
            // 恢复原始设置
            g.setStroke(originalStroke);
            g.setColor(originalColor);
        }
    }

    @Override
    public boolean contains(Point p) {
        for (int i = 0; i < points.size() - 1; i++) {
            Point p1 = points.get(i);
            Point p2 = points.get(i + 1);
            double dist = distanceToLine(p, p1, p2);
            if (dist <= strokeWidth + 2) return true;
        }
        return false;
    }

    private double distanceToLine(Point p, Point start, Point end) {
        double normalLength = Math.sqrt((end.x-start.x)*(end.x-start.x) +
                (end.y-start.y)*(end.y-start.y));
        if (normalLength == 0) return p.distance(start);
        return Math.abs((p.x-start.x)*(end.y-start.y)-(p.y-start.y)*(end.x-start.x))/normalLength;
    }

    // 新增：获取点列表（用于调试或其他用途）
    public List<Point> getPoints() {
        return new ArrayList<>(points);
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\Line.java =====
package com.whiteboard.client.shapes;

import java.awt.*;

public class Line extends Shape {
    public Line(Point start, Point end, Color color, int strokeWidth) {
        super(start, end, color, strokeWidth);
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(getDrawColor());
        g.setStroke(new BasicStroke(strokeWidth));
        g.drawLine(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
    }

    @Override
    public boolean contains(Point p) {
        double distanceToLine = distanceToLine(p, startPoint, endPoint);
        return distanceToLine <= strokeWidth + 2;
    }

    private double distanceToLine(Point p, Point start, Point end) {
        double normalLength = Math.sqrt((end.x-start.x)*(end.x-start.x) +
                (end.y-start.y)*(end.y-start.y));
        return Math.abs((p.x-start.x)*(end.y-start.y)-(p.y-start.y)*(end.x-start.x))/normalLength;
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\Oval.java =====
package com.whiteboard.client.shapes;

import java.awt.*;

public class Oval extends Shape {
    public Oval(Point start, Point end, Color color, int strokeWidth) {
        super(start, end, color, strokeWidth);
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(getDrawColor());
        g.setStroke(new BasicStroke(strokeWidth));

        int x = Math.min(startPoint.x, endPoint.x);
        int y = Math.min(startPoint.y, endPoint.y);
        int width = Math.abs(endPoint.x - startPoint.x);
        int height = Math.abs(endPoint.y - startPoint.y);

        g.drawOval(x, y, width, height);
    }

    @Override
    public boolean contains(Point p) {
        int x = Math.min(startPoint.x, endPoint.x);
        int y = Math.min(startPoint.y, endPoint.y);
        int width = Math.abs(endPoint.x - startPoint.x);
        int height = Math.abs(endPoint.y - startPoint.y);

        double rx = width / 2.0;
        double ry = height / 2.0;
        double cx = x + rx;
        double cy = y + ry;

        double normX = (p.x - cx) / rx;
        double normY = (p.y - cy) / ry;
        double dist = normX * normX + normY * normY;

        return Math.abs(dist - 1.0) <= (strokeWidth / Math.min(rx, ry));
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\Rectangle.java =====
package com.whiteboard.client.shapes;

import java.awt.*;

public class Rectangle extends Shape {
    public Rectangle(Point start, Point end, Color color, int strokeWidth) {
        super(start, end, color, strokeWidth);
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(getDrawColor());
        g.setStroke(new BasicStroke(strokeWidth));

        int x = Math.min(startPoint.x, endPoint.x);
        int y = Math.min(startPoint.y, endPoint.y);
        int width = Math.abs(endPoint.x - startPoint.x);
        int height = Math.abs(endPoint.y - startPoint.y);

        g.drawRect(x, y, width, height);
    }

    @Override
    public boolean contains(Point p) {
        int x = Math.min(startPoint.x, endPoint.x);
        int y = Math.min(startPoint.y, endPoint.y);
        int width = Math.abs(endPoint.x - startPoint.x);
        int height = Math.abs(endPoint.y - startPoint.y);

        return p.x >= x - strokeWidth && p.x <= x + width + strokeWidth &&
                p.y >= y - strokeWidth && p.y <= y + height + strokeWidth &&
                (Math.abs(p.x - x) <= strokeWidth ||
                        Math.abs(p.x - (x + width)) <= strokeWidth ||
                        Math.abs(p.y - y) <= strokeWidth ||
                        Math.abs(p.y - (y + height)) <= strokeWidth);
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\Shape.java =====
package com.whiteboard.client.shapes;

import java.awt.*;
import java.io.Serializable;
import java.util.UUID;

// abstract class Shape
public abstract class Shape implements Serializable {
    private static final long serialVersionUID = 1L;

    protected String id;
    protected Color color;
    protected Point startPoint;
    protected Point endPoint;
    protected int strokeWidth;
    // for temporary use
    protected int tempAlpha = -1;
    protected long timestamp;
// constructor
    public Shape(Point startPoint, Point endPoint, Color color, int strokeWidth) {
        this.id = UUID.randomUUID().toString();
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.color = color;
        this.strokeWidth = strokeWidth;
        // Set the timestamp to the current time
        this.timestamp = System.currentTimeMillis();
    }

    public abstract void draw(Graphics2D g);
    public abstract boolean contains(Point p);

    // Getters and setters
    public String getId() { return id; }
    public Color getColor() { return color; }
    public Point getStartPoint() { return startPoint; }
    public Point getEndPoint() { return endPoint; }
    public void setEndPoint(Point endPoint) { this.endPoint = endPoint; }
    public int getStrokeWidth() { return strokeWidth; }

    // 新增时间戳方法
    public long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    // 其余方法保持不变
    protected Color getDrawColor() {
        if (tempAlpha >= 0) {
            return new Color(
                    color.getRed(),
                    color.getGreen(),
                    color.getBlue(),
                    tempAlpha
            );
        }
        return color;
    }

    public int getAlpha() {
        return color.getAlpha();
    }

    public void setTempAlpha(int alpha) {
        this.tempAlpha = alpha;
    }

    public void clearTempAlpha() {
        this.tempAlpha = -1;
    }

    public boolean hasTempAlpha() {
        return tempAlpha >= 0;
    }
}

===== .\src\main\java\com\whiteboard\client\shapes\Text.java =====
package com.whiteboard.client.shapes;

import java.awt.*;

public class Text extends Shape {
    private String text;
    private Font font;

    public Text(Point position, String text, Color color, Font font) {
        super(position, position, color, 1);
        this.text = text;
        this.font = font;
    }

    @Override
    public void draw(Graphics2D g) {
        // 保存原始字体
        Font originalFont = g.getFont();

        // 设置正确的绘制属性
        g.setColor(getDrawColor());

        // 确保使用原始的Unicode支持字体
        Font unicodeFont = new Font("Arial Unicode MS", font.getStyle(), font.getSize());
        try {
            g.setFont(unicodeFont);
        } catch (Exception e) {
            // 如果无法设置首选字体，使用原始字体
            g.setFont(font);
        }

        // 绘制文本
        g.drawString(text, startPoint.x, startPoint.y);

        // 恢复原始字体
        g.setFont(originalFont);
    }

    @Override
    public boolean contains(Point p) {
        FontMetrics metrics = new FontMetrics(font) {};
        int textWidth = metrics.stringWidth(text);
        int textHeight = metrics.getHeight();

        return p.x >= startPoint.x && p.x <= startPoint.x + textWidth &&
                p.y >= startPoint.y - textHeight && p.y <= startPoint.y;
    }

    public String getText() {
        return text;
    }

    public Font getFont() {
        return font;
    }
}


===== .\src\main\java\com\whiteboard\client\shapes\Triangle.java =====
package com.whiteboard.client.shapes;

import java.awt.*;

public class Triangle extends Shape {
    public Triangle(Point start, Point end, Color color, int strokeWidth) {
        super(start, end, color, strokeWidth);
    }

    @Override
    public void draw(Graphics2D g) {
        g.setColor(getDrawColor());
        g.setStroke(new BasicStroke(strokeWidth));

        // 计算三角形的三个点
        int[] xPoints = new int[3];
        int[] yPoints = new int[3];

        xPoints[0] = startPoint.x;
        yPoints[0] = endPoint.y;

        xPoints[1] = (startPoint.x + endPoint.x) / 2;
        yPoints[1] = startPoint.y;

        xPoints[2] = endPoint.x;
        yPoints[2] = endPoint.y;

        g.drawPolygon(xPoints, yPoints, 3);
    }

    @Override
    public boolean contains(Point p) {
        int[] xPoints = new int[3];
        int[] yPoints = new int[3];

        xPoints[0] = startPoint.x;
        yPoints[0] = endPoint.y;

        xPoints[1] = (startPoint.x + endPoint.x) / 2;
        yPoints[1] = startPoint.y;

        xPoints[2] = endPoint.x;
        yPoints[2] = endPoint.y;

        for (int i = 0; i < 3; i++) {
            int j = (i + 1) % 3;
            Point lineStart = new Point(xPoints[i], yPoints[i]);
            Point lineEnd = new Point(xPoints[j], yPoints[j]);
            double dist = distanceToLine(p, lineStart, lineEnd);
            if (dist <= strokeWidth) return true;
        }
        return false;
    }

    private double distanceToLine(Point p, Point start, Point end) {
        double normalLength = Math.sqrt((end.x-start.x)*(end.x-start.x) +
                (end.y-start.y)*(end.y-start.y));
        return Math.abs((p.x-start.x)*(end.y-start.y)-(p.y-start.y)*(end.x-start.x))/normalLength;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\DrawingTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Shape;
import java.awt.Point;

public interface DrawingTool {
    void mousePressed(Point p);
    void mouseDragged(Point p);
    void mouseReleased(Point p);
    Shape getCreatedShape();
}

===== .\src\main\java\com\whiteboard\client\tools\EraserTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Shape;
import com.whiteboard.client.shapes.FreeDrawing;
import java.awt.Point;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.awt.Color;
import com.whiteboard.client.shapes.ErasureShape;
import com.whiteboard.client.shapes.FreeDrawing;

public class EraserTool implements DrawingTool {
    private FreeDrawing currentErasure;
    private final Color eraserColor; // 橡皮擦颜色（白色）
    private int eraserSize;
    private Point currentPoint;
    private List<Point> erasePath = new ArrayList<>();
    private List<Shape> shapesToRemove = new ArrayList<>();
    private List<Shape> shapesToPreview = new ArrayList<>();
    private boolean released = false;
    private ErasureShape finalErasureShape = null;

    public EraserTool(int eraserSize, Color backgroundColor) {
        this.eraserSize = eraserSize;
        // 橡皮擦始终使用白色，忽略传入的背景色
        this.eraserColor = Color.WHITE;

        System.out.println("EraserTool created with size: " + eraserSize + ", using WHITE color");
    }

    @Override
    public void mousePressed(Point p) {
        System.out.println("EraserTool mousePressed at: " + p);

        // 创建白色的自由绘制对象
        currentErasure = new FreeDrawing(p, eraserColor, eraserSize);

        // 不需要设置擦除标志，就当普通的白色笔刷使用
        currentPoint = p;

        System.out.println("Created FreeDrawing with color: " + currentErasure.getColor());
    }

    @Override
    public void mouseDragged(Point p) {
        if (currentErasure != null) {
            addPointWithInterpolation(p);
            currentPoint = p;
        }
    }

    @Override
    public void mouseReleased(Point p) {
        if (currentErasure != null) {
            currentErasure.addPoint(p);
            currentPoint = p;
        }

        System.out.println("EraserTool mouseReleased, shape ready for sending");
    }

    @Override
    public Shape getCreatedShape() {
        return currentErasure;
    }

    public void resetErasureShape() {
        System.out.println("Resetting eraser shape");
        currentErasure = null;
    }

    // 添加带插值的点，解决快速移动时的路径不连续问题
    private void addPointWithInterpolation(Point newPoint) {
        if (currentErasure == null) return;

        List<Point> existingPoints = currentErasure.getPoints();
        if (existingPoints.isEmpty()) {
            currentErasure.addPoint(newPoint);
            return;
        }

        // 获取最后一个点
        Point lastPoint = existingPoints.get(existingPoints.size() - 1);

        // 计算距离
        double distance = lastPoint.distance(newPoint);

        // 如果距离太大，插入中间点
        if (distance > 5) { // 降低阈值到5像素以获得更平滑的曲线
            int steps = (int)(distance / 3) + 1; // 每3像素一个点

            for (int i = 1; i < steps; i++) {
                double ratio = (double)i / steps;
                int x = (int)(lastPoint.x + (newPoint.x - lastPoint.x) * ratio);
                int y = (int)(lastPoint.y + (newPoint.y - lastPoint.y) * ratio);

                Point interpolatedPoint = new Point(x, y);
                currentErasure.addPoint(interpolatedPoint);
            }
        }

        // 添加新点
        currentErasure.addPoint(newPoint);
    }

    // 简化后的getter方法
    public Point getCurrentPoint() {
        return currentPoint;
    }

    public int getEraserSize() {
        return eraserSize;
    }

    public Color getBackgroundColor() {
        return eraserColor; // 始终返回白色
    }

    public void setEraserSize(int eraserSize) {
        this.eraserSize = eraserSize;
    }

    public void setCurrentPoint(Point p) {
        this.currentPoint = p;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\LineTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Line;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Point;

public class LineTool implements DrawingTool {
    private Line currentLine;
    private Color color;
    private int strokeWidth;

    public LineTool(Color color, int strokeWidth) {
        this.color = color;
        this.strokeWidth = strokeWidth;
    }

    @Override
    public void mousePressed(Point p) {
        currentLine = new Line(p, p, color, strokeWidth);
    }

    @Override
    public void mouseDragged(Point p) {
        currentLine.setEndPoint(p);
    }

    @Override
    public void mouseReleased(Point p) {
        currentLine.setEndPoint(p);
    }

    @Override
    public Shape getCreatedShape() {
        return currentLine;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\OvalTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Oval;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Point;

public class OvalTool implements DrawingTool {
    private Oval currentOval;
    private Color color;
    private int strokeWidth;

    public OvalTool(Color color, int strokeWidth) {
        this.color = color;
        this.strokeWidth = strokeWidth;
    }

    @Override
    public void mousePressed(Point p) {
        currentOval = new Oval(p, p, color, strokeWidth);
    }

    @Override
    public void mouseDragged(Point p) {
        currentOval.setEndPoint(p);
    }

    @Override
    public void mouseReleased(Point p) {
        currentOval.setEndPoint(p);
    }

    @Override
    public Shape getCreatedShape() {
        return currentOval;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\PencilTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.FreeDrawing;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Point;

public class PencilTool implements DrawingTool {
    private FreeDrawing currentFreeDraw;
    private Color color;
    private int strokeWidth;

    public PencilTool(Color color, int strokeWidth) {
        this.color = color;
        this.strokeWidth = strokeWidth;
    }

    @Override
    public void mousePressed(Point p) {
        currentFreeDraw = new FreeDrawing(p, color, strokeWidth);
    }

    @Override
    public void mouseDragged(Point p) {
        currentFreeDraw.addPoint(p);
    }

    @Override
    public void mouseReleased(Point p) {
        currentFreeDraw.addPoint(p);
    }

    @Override
    public Shape getCreatedShape() {
        return currentFreeDraw;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\RectangleTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Rectangle;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Point;

public class RectangleTool implements DrawingTool {
    private Rectangle currentRect;
    private Color color;
    private int strokeWidth;

    public RectangleTool(Color color, int strokeWidth) {
        this.color = color;
        this.strokeWidth = strokeWidth;
    }

    @Override
    public void mousePressed(Point p) {
        currentRect = new Rectangle(p, p, color, strokeWidth);
    }

    @Override
    public void mouseDragged(Point p) {
        currentRect.setEndPoint(p);
    }

    @Override
    public void mouseReleased(Point p) {
        currentRect.setEndPoint(p);
    }

    @Override
    public Shape getCreatedShape() {
        return currentRect;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\TextTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Text;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;

public class TextTool implements DrawingTool {
    private Text currentText;
    private Color color;
    private Font font;
    private String text = "";
    private Point position;
    private boolean isEditing = false;
    private Point currentPosition;

    public TextTool(Color color, Font font) {
        this.color = color;
        this.font = font;
    }

    public void setText(String text) {
        this.text = text;
        // 如果当前正在编辑，更新预览文本
        if (isEditing && position != null) {
            currentText = new Text(position, text, color, font);
        }
    }

    public void setPosition(Point p) {
        this.position = p;
    }

    public void startEditing() {
        isEditing = true;
        text = "";
        if (position != null) {
            // 创建预览文本
            currentText = new Text(position, text, color, font);
        }
    }

    public void finishEditing() {
        isEditing = false;
        // 如果文本为空或只有空格，不创建文本对象
        if (text != null && !text.trim().isEmpty()) {
            currentText = new Text(position, text, color, font);
        } else {
            currentText = null;
        }
    }

    public boolean isEditing() {
        return isEditing;
    }

    @Override
    public void mousePressed(Point p) {
        position = p;
        startEditing();
    }

    @Override
    public void mouseDragged(Point p) {
        // 文本工具不处理拖动
    }

    @Override
    public void mouseReleased(Point p) {
        // 文本工具不处理释放
    }

    @Override
    public Shape getCreatedShape() {
        return currentText;
    }

    public Font getFont() {
        return font;
    }

    public void setFont(Font font) {
        this.font = font;
        if (isEditing && position != null) {
            currentText = new Text(position, text, color, font);
        }
    }

    public String getText() {
        return text;
    }

    // 为了完全清除状态，可以添加一个重置方法
    public void reset() {
        text = "";
        currentText = null;
        isEditing = false;
    }
}

===== .\src\main\java\com\whiteboard\client\tools\ToolFactory.java =====
package com.whiteboard.client.tools;

import java.awt.Color;
import java.awt.Font;

public class ToolFactory {
    public enum ToolType {
        PENCIL, LINE, RECTANGLE, OVAL, TRIANGLE, TEXT, ERASER
    }

    public static DrawingTool createTool(ToolType type, Color color, int strokeWidth) {
        switch (type) {
            case PENCIL:
                return new PencilTool(color, strokeWidth);
            case LINE:
                return new LineTool(color, strokeWidth);
            case RECTANGLE:
                return new RectangleTool(color, strokeWidth);
            case OVAL:
                return new OvalTool(color, strokeWidth);
            case TRIANGLE:
                return new TriangleTool(color, strokeWidth);
            case TEXT:
                return new TextTool(color, new Font("Arial", Font.PLAIN, 14));
            case ERASER:
                return new EraserTool((int)Math.round(strokeWidth * 1.5), Color.WHITE);
            default:
                return new PencilTool(color, strokeWidth);
        }
    }
}

===== .\src\main\java\com\whiteboard\client\tools\TriangleTool.java =====
package com.whiteboard.client.tools;

import com.whiteboard.client.shapes.Triangle;
import com.whiteboard.client.shapes.Shape;
import java.awt.Color;
import java.awt.Point;

public class TriangleTool implements DrawingTool {
    private Triangle currentTriangle;
    private Color color;
    private int strokeWidth;

    public TriangleTool(Color color, int strokeWidth) {
        this.color = color;
        this.strokeWidth = strokeWidth;
    }

    @Override
    public void mousePressed(Point p) {
        currentTriangle = new Triangle(p, p, color, strokeWidth);
    }

    @Override
    public void mouseDragged(Point p) {
        currentTriangle.setEndPoint(p);
    }

    @Override
    public void mouseReleased(Point p) {
        currentTriangle.setEndPoint(p);
    }

    @Override
    public Shape getCreatedShape() {
        return currentTriangle;
    }
}

===== .\src\main\java\com\whiteboard\client\ui\AdvancedColorPanel.java =====
package com.whiteboard.client.ui;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.function.Consumer;

public class AdvancedColorPanel extends JPanel {
    private Color currentColor = Color.BLACK;
    private Color originalColor = Color.BLACK; // 保存原始颜色，用于取消操作
    private Color lastAppliedColor = Color.BLACK; // 保存最后应用的颜色
    private JPanel colorPreview;
    private JSlider redSlider, greenSlider, blueSlider, alphaSlider;
    private JTextField redField, greenField, blueField, alphaField, hexField;
    private Consumer<Color> colorChangeListener;
    private boolean updatingControls = false;
    private JButton okButton, applyButton, cancelButton;
    private Dialog ownerDialog; // 引用包含此面板的对话框
    private boolean confirmed = false; // 跟踪用户是确认还是取消

    public AdvancedColorPanel(Color initialColor, Consumer<Color> colorChangeListener) {
        this.currentColor = initialColor != null ? initialColor : Color.BLACK;
        this.originalColor = new Color(
                currentColor.getRed(),
                currentColor.getGreen(),
                currentColor.getBlue(),
                currentColor.getAlpha()
        ); // 保存初始颜色的副本
        this.lastAppliedColor = this.originalColor; // 初始时，最后应用的颜色与原始颜色相同
        this.colorChangeListener = colorChangeListener;

        setLayout(new BorderLayout(10, 10));
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // 主面板（包含颜色预览和控件）
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));

        // Color preview panel on the left
        colorPreview = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // 绘制棋盘背景以显示透明度
                int squareSize = 8;
                for (int i = 0; i < getWidth(); i += squareSize) {
                    for (int j = 0; j < getHeight(); j += squareSize) {
                        if ((i / squareSize + j / squareSize) % 2 == 0) {
                            g.setColor(Color.LIGHT_GRAY);
                        } else {
                            g.setColor(Color.WHITE);
                        }
                        g.fillRect(i, j, squareSize, squareSize);
                    }
                }

                // 绘制当前颜色
                g.setColor(currentColor);
                g.fillRect(0, 0, getWidth(), getHeight());

                // Draw a border
                g.setColor(Color.GRAY);
                g.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
            }
        };
        colorPreview.setPreferredSize(new Dimension(80, 80));
        mainPanel.add(colorPreview, BorderLayout.WEST);

        // Controls panel on the right
        JPanel controlsPanel = new JPanel();
        controlsPanel.setLayout(new BoxLayout(controlsPanel, BoxLayout.Y_AXIS));

        // Hex color field
        JPanel hexPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        hexPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));

        // 使用固定宽度的标签面板
        JPanel hexLabelPanel = new JPanel();
        hexLabelPanel.setLayout(new BorderLayout());
        hexLabelPanel.setPreferredSize(new Dimension(50, 20));
        JLabel hexLabel = new JLabel("Hex:");
        hexLabelPanel.add(hexLabel, BorderLayout.WEST);
        hexPanel.add(hexLabelPanel);

        hexField = new JTextField(7);
        hexField.setText(String.format("#%02X%02X%02X",
                currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));
        hexField.getDocument().addDocumentListener(new HexFieldListener());
        hexField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                updateColorFromHex();
            }
        });
        hexField.addActionListener(e -> updateColorFromHex());
        hexPanel.add(hexField);
        controlsPanel.add(hexPanel);

        // RGB sliders - 使用相同的面板和标签宽度
        controlsPanel.add(createColorSlider("Red", redSlider = new JSlider(0, 255, currentColor.getRed()),
                redField = new JTextField(3), Color.RED));
        controlsPanel.add(createColorSlider("Green", greenSlider = new JSlider(0, 255, currentColor.getGreen()),
                greenField = new JTextField(3), Color.GREEN));
        controlsPanel.add(createColorSlider("Blue", blueSlider = new JSlider(0, 255, currentColor.getBlue()),
                blueField = new JTextField(3), Color.BLUE));

        // Alpha slider
        controlsPanel.add(createColorSlider("Alpha", alphaSlider = new JSlider(0, 255, currentColor.getAlpha()),
                alphaField = new JTextField(3), Color.GRAY));

        mainPanel.add(controlsPanel, BorderLayout.CENTER);

        // 添加按钮面板
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));

        okButton = new JButton("OK");
        okButton.addActionListener(e -> {
            confirmed = true;
            notifyColorChange(); // 确认时通知颜色更改
            lastAppliedColor = new Color(
                currentColor.getRed(),
                currentColor.getGreen(),
                currentColor.getBlue(),
                currentColor.getAlpha()
            ); // 更新最后应用的颜色
            if (ownerDialog != null) {
                ownerDialog.dispose();
            }
        });

        applyButton = new JButton("Apply");
        applyButton.addActionListener(e -> {
            notifyColorChange(); // 应用时通知颜色更改
            lastAppliedColor = new Color(
                currentColor.getRed(),
                currentColor.getGreen(),
                currentColor.getBlue(),
                currentColor.getAlpha()
            ); // 更新最后应用的颜色
            // 不关闭对话框
        });

        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> {
            confirmed = false;
            // 还原到原始颜色
            currentColor = originalColor;
            // 不通知颜色变化，直接关闭
            if (ownerDialog != null) {
                ownerDialog.dispose();
            }
        });

        buttonPanel.add(okButton);
        buttonPanel.add(applyButton);
        buttonPanel.add(cancelButton);

        // 添加主面板和按钮面板
        add(mainPanel, BorderLayout.CENTER);
        add(buttonPanel, BorderLayout.SOUTH);

        // Initialize field values
        updateControlsFromColor();
    }

    // 设置拥有此面板的对话框引用
    public void setOwnerDialog(Dialog ownerDialog) {
        this.ownerDialog = ownerDialog;
    }

    private JPanel createColorSlider(String name, JSlider slider, JTextField field, Color labelColor) {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(5, 0));
        panel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 0));

        // 使用固定宽度的标签面板确保对齐
        JPanel labelPanel = new JPanel();
        labelPanel.setLayout(new BorderLayout());
        labelPanel.setPreferredSize(new Dimension(50, 20));
        JLabel label = new JLabel(name);
        label.setForeground(labelColor);
        labelPanel.add(label, BorderLayout.WEST);
        panel.add(labelPanel, BorderLayout.WEST);

        // 滑块设置
        slider.setPreferredSize(new Dimension(150, 20));
        slider.addChangeListener(e -> {
            if (!updatingControls) {
                updatingControls = true;
                field.setText(String.valueOf(slider.getValue()));
                updateColorFromSliders();
                updatingControls = false;
            }
        });
        panel.add(slider, BorderLayout.CENTER);

        // 文本框设置
        field.setText(String.valueOf(slider.getValue()));
        field.setPreferredSize(new Dimension(40, 20));
        configureNumberField(field, 0, 255);
        field.getDocument().addDocumentListener(new TextFieldListener(field, slider));
        field.addActionListener(e -> updateColorFromFields());

        // 把文本框放在一个固定宽度的面板中
        JPanel fieldPanel = new JPanel(new BorderLayout());
        fieldPanel.setPreferredSize(new Dimension(45, 20));
        fieldPanel.add(field, BorderLayout.CENTER);
        panel.add(fieldPanel, BorderLayout.EAST);

        return panel;
    }

    private void configureNumberField(JTextField field, int min, int max) {
        ((AbstractDocument) field.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)
                    throws BadLocationException {
                if (string.matches("\\d*")) {
                    super.insertString(fb, offset, string, attr);
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                    throws BadLocationException {
                if (text.matches("\\d*")) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }
        });

        field.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                validateFieldValue(field, min, max);
            }
        });
    }

    private void validateFieldValue(JTextField field, int min, int max) {
        try {
            int value = Integer.parseInt(field.getText());
            if (value < min) value = min;
            if (value > max) value = max;
            field.setText(String.valueOf(value));
        } catch (NumberFormatException ex) {
            field.setText(String.valueOf(min));
        }
    }

    private void updateColorFromSliders() {
        currentColor = new Color(
                redSlider.getValue(),
                greenSlider.getValue(),
                blueSlider.getValue(),
                alphaSlider.getValue()
        );
        hexField.setText(String.format("#%02X%02X%02X",
                currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));
        colorPreview.repaint();

        // 实时预览颜色，但不需要确认
        // 我们将等待OK按钮点击后才正式通知
    }

    private void updateColorFromFields() {
        if (!updatingControls) {
            updatingControls = true;
            try {
                int r = Integer.parseInt(redField.getText());
                int g = Integer.parseInt(greenField.getText());
                int b = Integer.parseInt(blueField.getText());
                int a = Integer.parseInt(alphaField.getText());

                r = Math.max(0, Math.min(255, r));
                g = Math.max(0, Math.min(255, g));
                b = Math.max(0, Math.min(255, b));
                a = Math.max(0, Math.min(255, a));

                redSlider.setValue(r);
                greenSlider.setValue(g);
                blueSlider.setValue(b);
                alphaSlider.setValue(a);

                currentColor = new Color(r, g, b, a);
                hexField.setText(String.format("#%02X%02X%02X", r, g, b));
                colorPreview.repaint();

                // 实时预览颜色，但不需要确认
            } catch (NumberFormatException e) {
                // Ignore invalid input
            }
            updatingControls = false;
        }
    }

    private void updateColorFromHex() {
        if (!updatingControls) {
            updatingControls = true;
            try {
                String hex = hexField.getText().replace("#", "").trim();
                if (hex.length() == 6) {
                    int r = Integer.parseInt(hex.substring(0, 2), 16);
                    int g = Integer.parseInt(hex.substring(2, 4), 16);
                    int b = Integer.parseInt(hex.substring(4, 6), 16);
                    int a = currentColor.getAlpha(); // Keep current alpha

                    redSlider.setValue(r);
                    greenSlider.setValue(g);
                    blueSlider.setValue(b);

                    redField.setText(String.valueOf(r));
                    greenField.setText(String.valueOf(g));
                    blueField.setText(String.valueOf(b));

                    currentColor = new Color(r, g, b, a);
                    colorPreview.repaint();

                    // 实时预览颜色，但不需要确认
                }
            } catch (Exception e) {
                // Restore valid hex on error
                hexField.setText(String.format("#%02X%02X%02X",
                        currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));
            }
            updatingControls = false;
        }
    }

    private void updateControlsFromColor() {
        updatingControls = true;

        redSlider.setValue(currentColor.getRed());
        greenSlider.setValue(currentColor.getGreen());
        blueSlider.setValue(currentColor.getBlue());
        alphaSlider.setValue(currentColor.getAlpha());

        redField.setText(String.valueOf(currentColor.getRed()));
        greenField.setText(String.valueOf(currentColor.getGreen()));
        blueField.setText(String.valueOf(currentColor.getBlue()));
        alphaField.setText(String.valueOf(currentColor.getAlpha()));

        hexField.setText(String.format("#%02X%02X%02X",
                currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));

        colorPreview.repaint();
        updatingControls = false;
    }

    public void setColor(Color color) {
        if (color != null) {
            this.currentColor = color;
            this.originalColor = new Color(
                    color.getRed(),
                    color.getGreen(),
                    color.getBlue(),
                    color.getAlpha()
            ); // 保存初始颜色副本
            this.lastAppliedColor = this.originalColor; // 重置最后应用的颜色
            updateControlsFromColor();
        }
    }

    public Color getColor() {
        return currentColor;
    }

    public Color getLastAppliedColor() {
        return lastAppliedColor;
    }

    public boolean isConfirmed() {
        return confirmed;
    }

    private void notifyColorChange() {
        if (colorChangeListener != null) {
            colorChangeListener.accept(currentColor);
        }
    }

    private class TextFieldListener implements DocumentListener {
        private JTextField field;
        private JSlider slider;

        public TextFieldListener(JTextField field, JSlider slider) {
            this.field = field;
            this.slider = slider;
        }

        private void update() {
            if (!updatingControls) {
                try {
                    int value = Integer.parseInt(field.getText());
                    value = Math.max(0, Math.min(255, value));
                    slider.setValue(value);
                    // The slider's change listener will update the color
                } catch (NumberFormatException e) {
                    // Ignore invalid input
                }
            }
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            update();
        }
    }

    private class HexFieldListener implements DocumentListener {
        private void update() {
            if (!updatingControls && hexField.getText().length() == 7) {
                updateColorFromHex();
            }
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            update();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            // Don't update when removing characters
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            update();
        }
    }
}

===== .\src\main\java\com\whiteboard\client\ui\ColorPanel.java =====
package com.whiteboard.client.ui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
/**
 * @deprecated This class is deprecated and will be removed in future releases.
 * Use {@link ColorSelectionPanel} instead.
 */
@Deprecated
public class ColorPanel extends JPanel {
    private WhiteboardPanel whiteboardPanel;

    public ColorPanel(WhiteboardPanel whiteboardPanel) {
        this.whiteboardPanel = whiteboardPanel;
        setLayout(new GridLayout(2, 8));
        initializeColors();
    }

    private void initializeColors() {
        // 基本颜色
        addColorButton(Color.BLACK);
        addColorButton(Color.DARK_GRAY);
        addColorButton(Color.GRAY);
        addColorButton(Color.LIGHT_GRAY);
        addColorButton(Color.WHITE);
        addColorButton(Color.RED);
        addColorButton(Color.PINK);
        addColorButton(Color.ORANGE);

        // 更多颜色
        addColorButton(Color.YELLOW);
        addColorButton(Color.GREEN);
        addColorButton(new Color(0, 128, 0)); // 深绿色
        addColorButton(Color.CYAN);
        addColorButton(Color.BLUE);
        addColorButton(new Color(0, 0, 128)); // 深蓝色
        addColorButton(Color.MAGENTA);
        addColorButton(new Color(128, 0, 128)); // 紫色
    }

    private void addColorButton(Color color) {
        JButton button = new JButton();
        button.setBackground(color);
        button.setPreferredSize(new Dimension(24, 24));
        button.setBorder(BorderFactory.createLineBorder(Color.BLACK));

        button.addActionListener(e -> whiteboardPanel.setCurrentColor(color));

        add(button);
    }
}

===== .\src\main\java\com\whiteboard\client\ui\ColorSelectionPanel.java =====
package com.whiteboard.client.ui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.function.Consumer;

public class ColorSelectionPanel extends JPanel {
    private Color currentColor = Color.BLACK;
    private int currentAlpha = 255; // 默认透明度为100%
    private JPanel colorPreviewCircle;
    private JLabel hexLabel;
    private JButton blackButton, redButton, advancedButton;
    private JSlider alphaSlider;
    private JTextField alphaField;
    private Consumer<Color> colorChangeListener;
    private JDialog advancedDialog;
    private AdvancedColorPanel advancedColorPanel;

    public ColorSelectionPanel(Color initialColor, Consumer<Color> colorChangeListener) {
        this.currentColor = initialColor != null ? initialColor : Color.BLACK;
        this.currentAlpha = this.currentColor.getAlpha();
        this.colorChangeListener = colorChangeListener;

        setLayout(new BorderLayout(5, 0));

        // 创建颜色预览圆和Hex标签
        JPanel previewPanel = new JPanel(new BorderLayout());
        previewPanel.setPreferredSize(new Dimension(80, 60));

        colorPreviewCircle = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                int size = Math.min(getWidth(), getHeight()) - 4;
                int x = (getWidth() - size) / 2;
                int y = (getHeight() - size) / 2;

                // 画透明背景（棋盘格）
                g2.setColor(Color.LIGHT_GRAY);
                g2.fillOval(x, y, size, size);
                g2.setColor(Color.WHITE);
                for (int i = 0; i < size; i += 8) {
                    for (int j = i % 16; j < size; j += 16) {
                        g2.fillRect(x + i, y + j, 8, 8);
                    }
                }

                // 画当前颜色
                g2.setColor(currentColor);
                g2.fillOval(x, y, size, size);

                // 画边框
                g2.setColor(Color.DARK_GRAY);
                g2.setStroke(new BasicStroke(1.5f));
                g2.drawOval(x, y, size, size);
            }
        };
        colorPreviewCircle.setPreferredSize(new Dimension(50, 50));
        previewPanel.add(colorPreviewCircle, BorderLayout.CENTER);

        hexLabel = new JLabel(String.format("#%02X%02X%02X",
                currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));
        hexLabel.setHorizontalAlignment(SwingConstants.CENTER);
        previewPanel.add(hexLabel, BorderLayout.SOUTH);

        add(previewPanel, BorderLayout.WEST);

        // 创建按钮和滑块面板
        JPanel controlsPanel = new JPanel(new BorderLayout(5, 0));

        JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        blackButton = createColorButton(Color.BLACK);
        redButton = createColorButton(Color.RED);
        advancedButton = new JButton("...");
        advancedButton.addActionListener(e -> showAdvancedColorDialog());

        buttonsPanel.add(blackButton);
        buttonsPanel.add(redButton);
        buttonsPanel.add(advancedButton);

        controlsPanel.add(buttonsPanel, BorderLayout.WEST);

        // 透明度滑块和输入框
        JPanel alphaPanel = new JPanel(new BorderLayout(5, 0));
        alphaPanel.add(new JLabel("Alpha:"), BorderLayout.WEST);

        alphaSlider = new JSlider(1, 100, currentAlpha * 100 / 255);
        alphaSlider.addChangeListener(e -> {
            currentAlpha = alphaSlider.getValue() * 255 / 100;
            alphaField.setText(alphaSlider.getValue() + "%");
            updateColorWithAlpha();
        });
        alphaPanel.add(alphaSlider, BorderLayout.CENTER);

        alphaField = new JTextField(4);
        alphaField.setText(alphaSlider.getValue() + "%");
        alphaField.addActionListener(e -> {
            try {
                String text = alphaField.getText().replace("%", "").trim();
                int value = Integer.parseInt(text);
                value = Math.max(1, Math.min(100, value));
                alphaSlider.setValue(value);
                // 滑块的changeListener会更新颜色
            } catch (NumberFormatException ex) {
                alphaField.setText(alphaSlider.getValue() + "%");
            }
        });
        alphaPanel.add(alphaField, BorderLayout.EAST);

        controlsPanel.add(alphaPanel, BorderLayout.CENTER);

        add(controlsPanel, BorderLayout.CENTER);
    }

    private JButton createColorButton(Color color) {
        JButton button = new JButton() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(color);
                g.fillRect(3, 3, getWidth() - 6, getHeight() - 6);
            }
        };
        button.setPreferredSize(new Dimension(24, 24));
        button.addActionListener(e -> {
            setBaseColor(color);
        });
        return button;
    }

    private void showAdvancedColorDialog() {
        try {
            Window parent = SwingUtilities.getWindowAncestor(this);

            if (advancedDialog == null) {
                // 创建对话框
                advancedDialog = new JDialog(
                        (parent instanceof Frame) ? (Frame) parent : null,
                        "Advanced Color Selector",
                        Dialog.ModalityType.APPLICATION_MODAL);

                // 创建高级颜色面板
                advancedColorPanel = new AdvancedColorPanel(currentColor, color -> {
                    // 这个回调会在用户点击"Apply"或"OK"按钮时被调用
                    // 在此更新主面板的颜色
                    setColor(color);

                    // 通知监听器
                    if (colorChangeListener != null) {
                        colorChangeListener.accept(color);
                    }
                });

                // 设置对话框引用
                advancedColorPanel.setOwnerDialog(advancedDialog);

                // 添加面板到对话框
                advancedDialog.add(advancedColorPanel);
                advancedDialog.pack();
                advancedDialog.setLocationRelativeTo(parent);
                advancedDialog.setResizable(false);
            } else {
                // 对话框已存在，更新高级面板的初始颜色
                advancedColorPanel.setColor(currentColor);
            }

            // 显示对话框
            advancedDialog.setVisible(true);

            // 对话框关闭后
            // 不需要在这里处理颜色更新，因为"Apply"和"OK"按钮会
            // 通过回调函数处理颜色更新

        } catch (Exception e) {
            // 处理任何可能的异常
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error opening color selector: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * 设置基础颜色（保持当前Alpha值）
     */
    private void setBaseColor(Color color) {
        // 保持当前的透明度
        this.currentColor = new Color(
                color.getRed(),
                color.getGreen(),
                color.getBlue(),
                currentAlpha
        );

        // 更新UI
        hexLabel.setText(String.format("#%02X%02X%02X",
                currentColor.getRed(), currentColor.getGreen(), currentColor.getBlue()));
        colorPreviewCircle.repaint();

        // 通知颜色变化
        notifyColorChange();
    }

    /**
     * 更新带Alpha值的颜色
     */
    private void updateColorWithAlpha() {
        this.currentColor = new Color(
                currentColor.getRed(),
                currentColor.getGreen(),
                currentColor.getBlue(),
                currentAlpha
        );
        colorPreviewCircle.repaint();
        notifyColorChange();
    }

    /**
     * 设置颜色
     * 此方法用于从外部设置颜色，如从高级面板
     */
    public void setColor(Color color) {
        if (color != null) {
            this.currentColor = color;
            this.currentAlpha = color.getAlpha();

            // 更新UI组件
            hexLabel.setText(String.format("#%02X%02X%02X",
                    color.getRed(), color.getGreen(), color.getBlue()));

            int alphaPercent = currentAlpha * 100 / 255;
            alphaSlider.setValue(alphaPercent);
            alphaField.setText(alphaPercent + "%");

            colorPreviewCircle.repaint();
        }
    }

    public Color getColor() {
        return currentColor;
    }

    private void notifyColorChange() {
        if (colorChangeListener != null) {
            colorChangeListener.accept(currentColor);
        }
    }
}

===== .\src\main\java\com\whiteboard\client\ui\ToolPanel.java =====
package com.whiteboard.client.ui;

import com.whiteboard.client.tools.*;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.logging.Logger;
import com.whiteboard.client.WhiteboardClient;

public class ToolPanel extends JToolBar {
    private WhiteboardPanel whiteboardPanel;
    private JSlider strokeWidthSlider;
    private JTextField strokeWidthField;
    private JPanel strokePreviewPanel; // 用于显示线宽预览
    // At the top of each class file:
    private static final Logger logger = Logger.getLogger(ToolPanel.class.getName());

    public ToolPanel(WhiteboardPanel whiteboardPanel) {
        this.whiteboardPanel = whiteboardPanel;
        setFloatable(false);
        initializeTools();
    }

    private void initializeTools() {
        // 铅笔工具按钮
        JButton pencilButton = new JButton("Pencil");
        pencilButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new PencilTool(whiteboardPanel.getCurrentColor(), getCurrentStrokeWidth())));
        add(pencilButton);

        // 线条按钮
        JButton lineButton = new JButton("Line");
        lineButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new LineTool(whiteboardPanel.getCurrentColor(), getCurrentStrokeWidth())));
        add(lineButton);

        // 矩形按钮
        JButton rectButton = new JButton("Rectangle");
        rectButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new RectangleTool(whiteboardPanel.getCurrentColor(), getCurrentStrokeWidth())));
        add(rectButton);

        // 椭圆按钮
        JButton ovalButton = new JButton("Oval");
        ovalButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new OvalTool(whiteboardPanel.getCurrentColor(), getCurrentStrokeWidth())));
        add(ovalButton);

        // 三角形按钮
        JButton triangleButton = new JButton("Triangle");
        triangleButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new TriangleTool(whiteboardPanel.getCurrentColor(), getCurrentStrokeWidth())));
        add(triangleButton);

        // 文本按钮
        JButton textButton = new JButton("Text");
        textButton.addActionListener(e ->
                whiteboardPanel.setCurrentTool(new TextTool(whiteboardPanel.getCurrentColor(),
                        new Font("Arial", Font.PLAIN, getCurrentFontSize()))));
        add(textButton);

        // 橡皮擦按钮 - 简化版本
        JButton eraserButton = new JButton("Eraser");
        eraserButton.addActionListener(e -> {
            // 创建橡皮擦工具，大小为当前笔刷大小的2倍（最小8像素）
            int eraserSize = Math.max(getCurrentStrokeWidth() * 2, 8);
            EraserTool eraserTool = new EraserTool(eraserSize, Color.WHITE);
            whiteboardPanel.setCurrentTool(eraserTool);
            logger.info("Eraser tool activated with size: " + eraserSize);
        });
        add(eraserButton);

        // 清除按钮
        JButton clearButton = new JButton("Clear All");
clearButton.addActionListener(e -> {
    // 首先检查权限，而不是直接清除本地画布
    Window window = SwingUtilities.getWindowAncestor(whiteboardPanel);
    if (window instanceof WhiteboardFrame) {
        WhiteboardFrame frame = (WhiteboardFrame) window;
        WhiteboardClient client = frame.getClient();

                if (client != null && client.isManager()) {
                    // 管理员：显示确认对话框
                    int response = JOptionPane.showConfirmDialog(whiteboardPanel,
                            "Clear all drawings?\nThis action cannot be undone.",
                            "Clear Canvas - Confirm",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE);

                    if (response == JOptionPane.YES_OPTION) {
                        try {
                            logger.info("Manager clearing canvas locally and sending to server");

                // 先清除本地画布
                whiteboardPanel.clearCanvas();

                // 然后发送清除命令到服务器
                client.clearCanvas();

                logger.info("Clear canvas command sent successfully");
            } catch (Exception ex) {
                logger.severe("Error sending clear canvas command: " + ex.getMessage());
                ex.printStackTrace();

                            // 如果发送到服务器失败，显示错误消息
                            JOptionPane.showMessageDialog(whiteboardPanel,
                                    "Error sending clear command to server: " + ex.getMessage(),
                                    "Network Error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else if (client != null && !client.isManager()) {
                    // 非管理员：只显示权限错误
                    logger.warning("Non-manager attempted to clear canvas");
                    JOptionPane.showMessageDialog(whiteboardPanel,
                            "Only the manager can clear the canvas.",
                            "Permission Denied",
                            JOptionPane.WARNING_MESSAGE);
                } else {
                    // 本地模式：直接清除本地画布
                    int response = JOptionPane.showConfirmDialog(whiteboardPanel,
                            "Clear all drawings?\nThis action cannot be undone.",
                            "Clear Canvas - Confirm",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE);

                    if (response == JOptionPane.YES_OPTION) {
                        logger.info("Local mode: clearing canvas locally");
                        whiteboardPanel.clearCanvas();
                    }
                }
            } else {
                // 如果无法获取客户端引用，默认为本地模式
                int response = JOptionPane.showConfirmDialog(whiteboardPanel,
                        "Clear all drawings?\nThis action cannot be undone.",
                        "Clear Canvas - Confirm",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    logger.info("Unable to get client reference, clearing locally");
                    whiteboardPanel.clearCanvas();
                }
            }
        });
        add(clearButton);

        // 添加分隔符
        addSeparator();

        // 线宽控制
        setupStrokeWidthControl();
    }

    private void setupStrokeWidthControl() {
        JPanel strokePanel = new JPanel(new BorderLayout(5, 0));
        strokePanel.add(new JLabel("Brush Size:"), BorderLayout.WEST);

        // 线宽滑块
        strokeWidthSlider = new JSlider(JSlider.HORIZONTAL, 1, 20, 2);
        strokeWidthSlider.setPreferredSize(new Dimension(100, 20));
        strokeWidthSlider.setMajorTickSpacing(5);
        strokeWidthSlider.setMinorTickSpacing(1);
        strokeWidthSlider.setPaintTicks(true);

        // 线宽文本输入框
        strokeWidthField = new JTextField(2);
        strokeWidthField.setText(String.valueOf(strokeWidthSlider.getValue()));
        strokeWidthField.setHorizontalAlignment(SwingConstants.CENTER);

        // 线宽预览面板
        strokePreviewPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;

                // 设置抗锯齿
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);

                // 获取当前线宽和颜色
                int width = getCurrentStrokeWidth();
                Color color = whiteboardPanel.getCurrentColor();

                // 绘制预览圆形
                g2d.setColor(color);

                // 根据笔刷大小计算圆形直径
                int diameter = width*2;

                // 居中绘制
                int Brush_x = (getWidth() - diameter) / 2;
                int Brush_y = (getHeight() - diameter) / 2;

                g2d.fillOval(Brush_x, Brush_y, diameter, diameter);
            }
        };
        strokePreviewPanel.setPreferredSize(new Dimension(40, 40));
        strokePreviewPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));

        // 线宽滑块事件监听
        strokeWidthSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int width = strokeWidthSlider.getValue();
                strokeWidthField.setText(String.valueOf(width));
                updateStrokeWidth(width);
                strokePreviewPanel.repaint();
            }
        });

        // 线宽文本框事件监听
        strokeWidthField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processStrokeWidthInput();
            }
        });

        strokeWidthField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                processStrokeWidthInput();
            }
        });

        JPanel rightPanel = new JPanel(new BorderLayout(5, 0));
        rightPanel.add(strokeWidthField, BorderLayout.CENTER);
        rightPanel.add(strokePreviewPanel, BorderLayout.EAST);

        strokePanel.add(strokeWidthSlider, BorderLayout.CENTER);
        strokePanel.add(rightPanel, BorderLayout.EAST);

        add(strokePanel);
    }

    private void processStrokeWidthInput() {
        try {
            // 尝试解析输入值
            String input = strokeWidthField.getText().trim();

            // 检查是否包含小数点
            double doubleValue = Double.parseDouble(input);

            // 四舍五入到整数
            int width = (int) Math.round(doubleValue);

            // 确保值大于0
            width = Math.max(1, width);

            // 确保不超过滑块最大值
            width = Math.min(width, strokeWidthSlider.getMaximum());

            // 更新滑块和字段
            strokeWidthSlider.setValue(width);
            strokeWidthField.setText(String.valueOf(width));

            // 更新工具
            updateStrokeWidth(width);

            // 更新预览
            strokePreviewPanel.repaint();
        } catch (NumberFormatException ex) {
            // 如果输入无效，恢复为当前滑块值
            strokeWidthField.setText(String.valueOf(strokeWidthSlider.getValue()));
        }
    }

    private void updateStrokeWidth(int width) {
        whiteboardPanel.setCurrentStrokeWidth(width);

        // 如果当前工具已存在，更新其线宽
        if (whiteboardPanel.getCurrentTool() != null &&
                !(whiteboardPanel.getCurrentTool() instanceof TextTool)) {
            // 当前工具的类型
            DrawingTool currentTool = whiteboardPanel.getCurrentTool();

            // 基于当前工具类型创建新工具，保持颜色但更新线宽
            if (currentTool instanceof PencilTool) {
                whiteboardPanel.setCurrentTool(
                        new PencilTool(whiteboardPanel.getCurrentColor(), width));
            } else if (currentTool instanceof LineTool) {
                whiteboardPanel.setCurrentTool(
                        new LineTool(whiteboardPanel.getCurrentColor(), width));
            } else if (currentTool instanceof RectangleTool) {
                whiteboardPanel.setCurrentTool(
                        new RectangleTool(whiteboardPanel.getCurrentColor(), width));
            } else if (currentTool instanceof OvalTool) {
                whiteboardPanel.setCurrentTool(
                        new OvalTool(whiteboardPanel.getCurrentColor(), width));
            } else if (currentTool instanceof TriangleTool) {
                whiteboardPanel.setCurrentTool(
                        new TriangleTool(whiteboardPanel.getCurrentColor(), width));
            } else if (currentTool instanceof EraserTool) {
                // 更新橡皮擦大小，保持当前模式
                EraserTool oldEraserTool = (EraserTool) currentTool;
                int eraserSize = Math.max(width * 2, 8); // 橡皮擦大小为笔刷的2倍，最小8像素
                EraserTool newEraserTool = new EraserTool(eraserSize, Color.WHITE);

                // 如果当前点存在，保留它
                if (oldEraserTool.getCurrentPoint() != null) {
                    newEraserTool.setCurrentPoint(oldEraserTool.getCurrentPoint());
                }

                whiteboardPanel.setCurrentTool(newEraserTool);
            }
        }
        // 更新预览
        strokePreviewPanel.repaint();
    }

    public int getCurrentStrokeWidth() {
        return strokeWidthSlider.getValue();
    }

    public int getCurrentFontSize() {
        // 不再使用文本字段，直接返回默认字体大小
        return 14; // 默认值
    }

    public void updatePreview() {
        if (strokePreviewPanel != null) {
            strokePreviewPanel.repaint();
        }
    }
}

===== .\src\main\java\com\whiteboard\client\ui\UIConstants.java =====
package com.whiteboard.client.ui;

public class UIConstants {
    // Tool names
    public static final String TOOL_PENCIL = "Pencil";
    public static final String TOOL_LINE = "Line";
    public static final String TOOL_RECTANGLE = "Rectangle";
    public static final String TOOL_OVAL = "Oval";
    public static final String TOOL_TRIANGLE = "Triangle";
    public static final String TOOL_TEXT = "Text";
    public static final String TOOL_ERASER = "Eraser";

    // Color panel
    public static final String COLOR_ADVANCED = "Advanced Color";
    public static final String COLOR_RED = "Red";
    public static final String COLOR_GREEN = "Green";
    public static final String COLOR_BLUE = "Blue";
    public static final String COLOR_ALPHA = "Alpha";
    public static final String COLOR_HEX = "Hex";

    // Dialogs
    public static final String DIALOG_TITLE_COLOR = "Color Selection";
    public static final String DIALOG_TITLE_TEXT = "Enter Text";

    // Buttons
    public static final String BUTTON_OK = "OK";
    public static final String BUTTON_CANCEL = "Cancel";
    public static final String BUTTON_APPLY = "Apply";

    // Error messages
    public static final String ERROR_INVALID_COLOR = "Invalid color format";
    public static final String ERROR_INVALID_NUMBER = "Invalid number";

    // Other labels
    public static final String LABEL_BRUSH_SIZE = "Brush Size";
    public static final String LABEL_ERASER_SIZE = "Eraser Size";
    public static final String LABEL_PREVIEW = "Preview";
}

===== .\src\main\java\com\whiteboard\client\ui\WhiteboardFrame.java =====
package com.whiteboard.client.ui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import com.whiteboard.client.WhiteboardClient;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Logger;

public class WhiteboardFrame extends JFrame {
    private WhiteboardPanel whiteboardPanel;
    private ToolPanel toolPanel;
    private ColorPanel colorPanel;
    private boolean isManager = false;

    private WhiteboardClient client;

    // 聊天相关组件
    private JList<String> userList;
    private DefaultListModel<String> userListModel;
    private JTextArea chatArea;
    private JTextField chatInput;

    // 新添加的颜色选择器
    private ColorSelectionPanel colorSelectionPanel; // 新添加
    private boolean useNewColorSelector = true; // 控制开关
    private Map<String, JDialog> pendingUserDialogs = new HashMap<>();

    //
    private static final Logger logger = Logger.getLogger(WhiteboardFrame.class.getName());

    public WhiteboardFrame(String title, boolean isManager, WhiteboardClient client) {
        super(title);
        this.isManager = isManager;
        this.client = client;
        initComponents();
        setupUI();
        setupWindowListener();
    }

    // 构造函数重载
    public WhiteboardFrame(String title, boolean isManager) {
        this(title, isManager, null);
    }

    private void initComponents() {
        whiteboardPanel = new WhiteboardPanel();
        toolPanel = new ToolPanel(whiteboardPanel);
        // 条件创建颜色选择器
        if (useNewColorSelector) {
            colorSelectionPanel = new ColorSelectionPanel(Color.BLACK, color -> {
                whiteboardPanel.setCurrentColor(color);
            });
        } else {
            colorPanel = new ColorPanel(whiteboardPanel);
        }

        whiteboardPanel.setToolPanel(toolPanel);
    }

    private void setupWindowListener() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleWindowClosing();
            }
        });
    }

    private void handleWindowClosing() {
        int response = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to exit?",
                "Exit Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (response == JOptionPane.YES_OPTION) {
            // 断开连接
            if (client != null) {
                try {
                    client.disconnect();
                } catch (Exception e) {
                    System.err.println("Error disconnecting: " + e.getMessage());
                    e.printStackTrace();
                }
            }

            dispose();
            System.exit(0);
        }
    }

    /**
     * 初始化用户列表面板
     */
    private JPanel createUserListPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("Online Users"));

        userListModel = new DefaultListModel<>();
        userList = new JList<>(userListModel);
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // 如果是管理员，添加右键菜单以踢出用户
        if (isManager) {
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem kickMenuItem = new JMenuItem("Kick User");
            kickMenuItem.addActionListener(e -> {
                String selectedUser = userList.getSelectedValue();
                if (selectedUser != null) {
                    kickUser(selectedUser);
                }
            });
            popupMenu.add(kickMenuItem);

            userList.setComponentPopupMenu(popupMenu);
        }

        JScrollPane scrollPane = new JScrollPane(userList);
        scrollPane.setPreferredSize(new Dimension(150, 200));
        panel.add(scrollPane, BorderLayout.CENTER);

        return panel;
    }

    /**
     * 初始化聊天面板
     */
    private JPanel createChatPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createTitledBorder("Chat"));

        chatArea = new JTextArea();
        chatArea.setEditable(false);
        chatArea.setLineWrap(true);
        chatArea.setWrapStyleWord(true);

        JScrollPane chatScrollPane = new JScrollPane(chatArea);
        chatScrollPane.setPreferredSize(new Dimension(150, 200));
        panel.add(chatScrollPane, BorderLayout.CENTER);

        // 输入区域
        JPanel inputPanel = new JPanel(new BorderLayout());
        chatInput = new JTextField();
        chatInput.addActionListener(e -> {
            sendChatMessage();
        });

        JButton sendButton = new JButton("Send");
        sendButton.addActionListener(e -> {
            sendChatMessage();
        });

        inputPanel.add(chatInput, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);
        panel.add(inputPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * 发送聊天消息
     */
    private void sendChatMessage() {
        String message = chatInput.getText().trim();
        if (!message.isEmpty()) {
            // 使用客户端发送消息
            if (client != null) {
                try {
                    client.sendChatMessage(message);
                } catch (Exception e) {
                    System.err.println("Error sending chat message: " + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                // 如果没有客户端（本地模式），直接显示
                addChatMessage("Me", message);
            }

            // 清空输入
            chatInput.setText("");
        }
    }

    /**
     * 添加聊天消息到聊天区域
     */
    public void addChatMessage(String sender, String message) {
        SwingUtilities.invokeLater(() -> {
            chatArea.append(sender + ": " + message + "\n");
            // 滚动到底部
            chatArea.setCaretPosition(chatArea.getDocument().getLength());
        });
    }

    /**
     * 更新用户列表
     */
    public void updateUserList(List<String> users) {
        if (users == null) {
            logger.warning("Received null user list");
            return;
        }

        logger.info("Updating user list: " + users);

        SwingUtilities.invokeLater(() -> {
            userListModel.clear();
            for (String username : users) {
                userListModel.addElement(username);
            }
        });
    }
    /**
     * 踢出用户（仅管理员）
     */
    private void kickUser(String username) {
        if (client != null && isManager) {
            try {
                if (client.kickUser(username)) {
                    JOptionPane.showMessageDialog(this,
                            "User '" + username + "' has been kicked.",
                            "User Kicked",
                            JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "Failed to kick user '" + username + "'.",
                            "Kick Failed",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (Exception e) {
                System.err.println("Error kicking user: " + e.getMessage());
                e.printStackTrace();
                JOptionPane.showMessageDialog(this,
                        "Error kicking user: " + e.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Kick functionality not available in local mode or you're not a manager.",
                    "Not Available",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    // 修改setupUI方法以添加用户列表和聊天区域
    private void setupUI() {
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setSize(1200, 800);
        setLayout(new BorderLayout());

        // 添加工具栏
        add(toolPanel, BorderLayout.NORTH);

        // 添加颜色选择器
        if (useNewColorSelector) {
            add(colorSelectionPanel, BorderLayout.SOUTH);
        } else {
            add(colorPanel, BorderLayout.SOUTH);
        }

        // 创建中心面板，包含画布
        JPanel centerPanel = new JPanel(new BorderLayout());
        JScrollPane scrollPane = new JScrollPane(whiteboardPanel);
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        // 创建侧边栏，包含用户列表和聊天
        JPanel sidePanel = new JPanel(new BorderLayout());
        sidePanel.add(createUserListPanel(), BorderLayout.NORTH);
        sidePanel.add(createChatPanel(), BorderLayout.CENTER);

        // 添加分割面板
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, centerPanel, sidePanel);
        splitPane.setResizeWeight(0.8); // 画布占比
        splitPane.setOneTouchExpandable(true);
        add(splitPane, BorderLayout.CENTER);

        // 如果是管理员，添加文件菜单
        if (isManager) {
            setupFileMenu();
        }

        // 使窗口居中显示
        setLocationRelativeTo(null);
    }

    /**
     * 设置文件菜单（仅管理员）
     */
    private void setupFileMenu() {
        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");

        JMenuItem newItem = new JMenuItem("New");
        newItem.addActionListener(e -> newWhiteboard());

        JMenuItem openItem = new JMenuItem("Open");
        openItem.addActionListener(e -> openWhiteboard());

        JMenuItem saveItem = new JMenuItem("Save");
        saveItem.addActionListener(e -> saveWhiteboard());

        JMenuItem saveAsItem = new JMenuItem("Save As");
        saveAsItem.addActionListener(e -> saveWhiteboardAs());

        JMenuItem closeItem = new JMenuItem("Close");
        closeItem.addActionListener(e -> closeApplication());

        fileMenu.add(newItem);
        fileMenu.add(openItem);
        fileMenu.addSeparator();
        fileMenu.add(saveItem);
        fileMenu.add(saveAsItem);
        fileMenu.addSeparator();
        fileMenu.add(closeItem);

        menuBar.add(fileMenu);
        setJMenuBar(menuBar);
    }

    // 文件菜单功能（暂时只是占位方法）
    private void newWhiteboard() {
        if (client != null && client.isManager()) {
            // 复用clear all的预警机制
            int response = JOptionPane.showConfirmDialog(this,
                    "Create a new whiteboard?\nThis will permanently delete all current drawings.",
                    "New Whiteboard - Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                try {
                    boolean success = client.newWhiteboard();
                    if (!success) {
                        JOptionPane.showMessageDialog(this,
                                "Failed to create new whiteboard.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    logger.severe("Error creating new whiteboard: " + e.getMessage());
                    JOptionPane.showMessageDialog(this,
                            "Error creating new whiteboard: " + e.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Only the manager can create a new whiteboard.",
                    "Permission Denied",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void openWhiteboard() {
        if (client != null && client.isManager()) {
            // 添加预警
            int response = JOptionPane.showConfirmDialog(this,
                    "Open a whiteboard file?\nThis will replace all current drawings with the loaded content.",
                    "Open Whiteboard - Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (response == JOptionPane.YES_OPTION) {
                boolean success = client.loadWhiteboard(null);
                if (!success) {
                    // 错误信息已在client中显示
                }
            }
        } else {
            // 修复：更准确的错误处理
            if (client == null) {
                JOptionPane.showMessageDialog(this,
                        "No connection available.",
                        "Connection Error",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Only the manager can load whiteboards.",
                        "Permission Denied",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void saveWhiteboard() {
        if (client != null && client.isManager()) {
            boolean success = client.saveWhiteboard();
            if (!success) {
                // 错误信息已在client中显示
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Only the manager can save whiteboards.",
                    "Permission Denied",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void saveWhiteboardAs() {
        if (client != null && client.isManager()) {
            boolean success = client.saveWhiteboardAs(null); // null会弹出输入对话框
            if (!success) {
                // 错误信息已在client中显示
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Only the manager can save whiteboards.",
                    "Permission Denied",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void closeApplication() {
        int response = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to exit?",
                "Exit Confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            dispose();
            System.exit(0);
        }
    }

    public WhiteboardPanel getWhiteboardPanel() {
        return whiteboardPanel;
    }

    public WhiteboardClient getClient() {
        return this.client;
    }

    /**
     * 显示用户加入请求对话框
     */
    public void showJoinRequest(String username, boolean isOnline) {
        logger.info("Showing join request from: " + username + " (online: " + isOnline + ")");

        SwingUtilities.invokeLater(() -> {
            // 检查是否已有该用户的对话框
            JDialog existingDialog = pendingUserDialogs.get(username);
            if (existingDialog != null && existingDialog.isVisible()) {
                // 更新现有对话框状态
                updateJoinRequestDialog(existingDialog, username, isOnline);
                return;
            }

            // 创建新的对话框
            JDialog dialog = new JDialog(this, "Join Request", false);
            pendingUserDialogs.put(username, dialog);

            JPanel panel = new JPanel(new BorderLayout(10, 10));
            panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            JLabel messageLabel = new JLabel("User '" + username + "' wants to join.");
            JLabel statusLabel = new JLabel("Status: " + (isOnline ? "waiting" : "disconnected"));

            JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
            JButton approveButton = new JButton("Approve");
            JButton rejectButton = new JButton("Reject");

            approveButton.addActionListener(e -> {
                if (client != null) {
                    if (client.approveUser(username)) {
                        JOptionPane.showMessageDialog(this,
                                "User '" + username + "' has been approved.",
                                "User Approved",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Failed to approve user '" + username + "'.",
                                "Approval Failed",
                                JOptionPane.WARNING_MESSAGE);
                    }
                }
                dialog.dispose();
                pendingUserDialogs.remove(username);
            });

            rejectButton.addActionListener(e -> {
                if (client != null) {
                    if (client.rejectUser(username)) {
                        JOptionPane.showMessageDialog(this,
                                "User '" + username + "' has been rejected.",
                                "User Rejected",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Failed to reject user '" + username + "'.",
                                "Rejection Failed",
                                JOptionPane.WARNING_MESSAGE);
                    }
                }
                dialog.dispose();
                pendingUserDialogs.remove(username);
            });

            buttonsPanel.add(approveButton);
            buttonsPanel.add(rejectButton);

            JPanel infoPanel = new JPanel(new GridLayout(2, 1, 5, 5));
            infoPanel.add(messageLabel);
            infoPanel.add(statusLabel);

            panel.add(infoPanel, BorderLayout.CENTER);
            panel.add(buttonsPanel, BorderLayout.SOUTH);

            dialog.add(panel);
            dialog.pack();
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            // 如果用户已断开连接，添加自动关闭计时器
            if (!isOnline) {
                startAutoCloseTimer(dialog, statusLabel, username);
            }
        });
    }

    /**
     * 更新加入请求对话框状态
     */
    private void updateJoinRequestDialog(JDialog dialog, String username, boolean isOnline) {
        // 查找状态标签并更新
        Container contentPane = dialog.getContentPane();
        if (contentPane.getComponentCount() > 0) {
            Component comp = contentPane.getComponent(0);
            if (comp instanceof JPanel) {
                JPanel mainPanel = (JPanel) comp;
                for (Component subComp : mainPanel.getComponents()) {
                    if (subComp instanceof JPanel) {
                        JPanel infoPanel = (JPanel) subComp;
                        for (Component infoComp : infoPanel.getComponents()) {
                            if (infoComp instanceof JLabel) {
                                JLabel label = (JLabel) infoComp;
                                if (label.getText().startsWith("Status:")) {
                                    label.setText("Status: " + (isOnline ? "waiting" : "disconnected"));

                                    // 如果用户已断开连接，添加自动关闭计时器
                                    if (!isOnline) {
                                        startAutoCloseTimer(dialog, label, username);
                                    }
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * 启动对话框自动关闭计时器
     */
    private void startAutoCloseTimer(JDialog dialog, JLabel statusLabel, String username) {
        Timer timer = new Timer(true);
        final int[] secondsLeft = {5};

        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(() -> {
                    secondsLeft[0]--;
                    statusLabel.setText("Status: disconnected (close after " + secondsLeft[0] + "s)");

                    if (secondsLeft[0] <= 0) {
                        timer.cancel();
                        dialog.dispose();
                        pendingUserDialogs.remove(username);
                    }
                });
            }
        }, 1000, 1000);
    }


}

===== .\src\main\java\com\whiteboard\client\ui\WhiteboardPanel.java =====
package com.whiteboard.client.ui;
import com.whiteboard.client.shapes.ErasureShape;
import com.whiteboard.client.shapes.Shape;
import com.whiteboard.client.shapes.Text;
import com.whiteboard.client.shapes.Rectangle;
import com.whiteboard.client.shapes.Oval;
import com.whiteboard.client.shapes.Line;
import com.whiteboard.client.shapes.Triangle;
import com.whiteboard.client.WhiteboardClient;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.function.Consumer;
import java.util.logging.Logger;
import java.util.HashMap;
import java.util.Map;


import com.whiteboard.client.tools.*;
import java.util.ArrayList;

public class WhiteboardPanel extends JPanel {
    private List<Shape> shapes;
    private DrawingTool currentTool;
    private Color currentColor;
    private int currentStrokeWidth;
    private Font currentFont;
    private ToolPanel toolPanel;
    private Point currentPoint;
    private Consumer<Shape> drawingListener;

    // 预览功能相关 - 暂时禁用以解决显示问题
    private Map<String, Shape> userPreviews = new HashMap<>(); // username -> preview shape
    private boolean isDrawing = false; // 标记是否正在绘制
    private boolean enablePreview = false; // 暂时禁用预览功能

    // 临时形状显示 - 用于显示当前正在绘制但尚未提交的形状
    private Shape currentDrawingShape = null;

    private static final Logger logger = Logger.getLogger(WhiteboardPanel.class.getName());




    public WhiteboardPanel() {
        shapes = new ArrayList<>();
        currentColor = Color.BLACK;
        currentStrokeWidth = 2;
        currentFont = new Font("Arial Unicode MS", Font.PLAIN, 14);

        // 默认工具为铅笔（自由绘制）
        currentTool = new PencilTool(currentColor, currentStrokeWidth);

        setBackground(Color.WHITE);
        setupMouseListeners();

        // 添加透明度测试
//        testTransparency();
    }

    private void setupMouseListeners() {
        MouseAdapter mouseAdapter = new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (currentTool instanceof TextTool) {
                    // 弹出文本输入对话框
                    TextTool textTool = (TextTool) currentTool;
                    textTool.mousePressed(e.getPoint());
                    showTextInputDialog(textTool);
                    repaint(); // 确保立即显示光标和预览
                } else {
                    // 所有其他工具（包括橡皮擦）的统一处理
                    currentTool.mousePressed(e.getPoint());
                    isDrawing = true;

                    // 显示当前正在绘制的形状作为临时预览
                    currentDrawingShape = currentTool.getCreatedShape();
                    repaint();
                }
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                if (currentTool instanceof TextTool) {
                    // 文本工具不处理拖动
                    return;
                } else {
                    // 其他工具处理
                    currentTool.mouseDragged(e.getPoint());

                    // 更新当前绘制形状的预览
                    currentDrawingShape = currentTool.getCreatedShape();
                    repaint();
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (currentTool instanceof TextTool) {
                    // 文本工具处理...
                    TextTool textTool = (TextTool) currentTool;
                    Shape textShape = textTool.getCreatedShape();
                    if (textShape != null) {
                        // 发送到服务器，等待服务器返回统一时间戳的版本
                        if (drawingListener != null) {
                            drawingListener.accept(textShape);
                        }
                    }
                } else {
                    // 其他工具处理
                    currentTool.mouseReleased(e.getPoint());

                    // 结束绘制
                    isDrawing = false;

                    Shape shape = currentTool.getCreatedShape();
                    if (shape != null) {
                        System.out.println("=== SHAPE COMPLETION DEBUG ===");
                        System.out.println("Shape completed: " + shape.getClass().getSimpleName());
                        System.out.println("Shape ID: " + shape.getId());
                        System.out.println("Shape timestamp before send: " + shape.getTimestamp());

                        // 关键修改：清除临时显示的形状，不添加到本地shapes列表
                        currentDrawingShape = null;

                        // 发送到服务器，等待服务器返回带正确时间戳的版本
                        if (drawingListener != null) {
                            drawingListener.accept(shape);
                            System.out.println("Shape sent to server, waiting for server response");
                        }

                        // 重置橡皮擦工具
                        if (currentTool instanceof EraserTool) {
                            EraserTool eraserTool = (EraserTool) currentTool;
                            eraserTool.resetErasureShape();
                        }

                        System.out.println("=== END SHAPE COMPLETION DEBUG ===");
                    }
                    repaint();
                }
            }
            // 添加鼠标移动监听
            @Override
            public void mouseMoved(MouseEvent e) {
                // 如果当前工具是橡皮擦，更新位置
                if (currentTool instanceof EraserTool) {
                    EraserTool eraserTool = (EraserTool) currentTool;
                    // 仅更新当前位置，不添加到路径
                    eraserTool.setCurrentPoint(e.getPoint());
                    repaint();
                }
            }

        };

        addMouseListener(mouseAdapter);
        addMouseMotionListener(mouseAdapter);
    }

    // ================== 预览功能相关方法 ==================

    /**
     * 更新其他用户的预览
     */
    public void updatePreview(Shape previewShape, String fromUser) {
        if (enablePreview) {
            logger.fine("Updating preview from user: " + fromUser);
            userPreviews.put(fromUser, previewShape);
            repaint();
        }
    }

    /**
     * 清除特定用户的预览
     */
    public void clearPreview(String fromUser) {
        if (enablePreview) {
            logger.fine("Clearing preview from user: " + fromUser);
            userPreviews.remove(fromUser);
            repaint();
        }
    }

    /**
     * 发送预览更新到服务器
     */
    private void sendPreviewUpdate(Shape shape) {
        if (!enablePreview) return;

        Window window = SwingUtilities.getWindowAncestor(this);
        if (window instanceof WhiteboardFrame) {
            WhiteboardFrame frame = (WhiteboardFrame) window;
            WhiteboardClient client = frame.getClient();
            if (client != null) {
                client.sendPreviewUpdate(shape);
            }
        }
    }

    /**
     * 清除预览
     */
    private void clearPreview() {
        if (!enablePreview) return;

        Window window = SwingUtilities.getWindowAncestor(this);
        if (window instanceof WhiteboardFrame) {
            WhiteboardFrame frame = (WhiteboardFrame) window;
            WhiteboardClient client = frame.getClient();
            if (client != null) {
                client.clearPreview();
            }
        }
    }

    // ================== 橡皮擦处理方法 ==================

//    private void processEraser(EraserTool eraserTool) {
//        if (eraserTool.getCurrentPoint() == null) return;
//
//        Point p = eraserTool.getCurrentPoint();
//        int size = eraserTool.getEraserSize();
//
//        if (eraserTool.getMode() == EraserTool.EraseMode.OBJECT) {
//            // 对象擦除模式
//            //processObjectEraser(eraserTool, p, size);
//        } else {
//            // 自由擦除模式
//            processFreeEraser(eraserTool);
//        }
//
//        repaint();
//    }

    // 修改WhiteboardPanel中的processFreeEraser方法
//    private void processFreeEraser(EraserTool eraserTool) {
//        List<Point> path = eraserTool.getErasePath();
//        if (path.size() < 2) return;
//
//        int size = eraserTool.getEraserSize();
//
//        // 鼠标释放时，创建一个擦除形状
//        if (!path.isEmpty() &&
//                eraserTool.getCurrentPoint().equals(path.get(path.size() - 1))) {
//
//            // 创建一个使用背景色的擦除形状
//            ErasureShape erasureShape = new ErasureShape(
//                    new ArrayList<>(path), // 复制当前路径
//                    size,
//                    getBackground() // 使用画布背景色
//            );
//
//            // 添加到形状列表
//            shapes.add(erasureShape);
//
//            // 清除路径以便下次擦除
//            eraserTool.clearPath();
//        }
//
//        repaint();
//    }

    // ================== 文本输入对话框 ==================

    // 修改文本输入对话框方法，使用固定字体确保支持Unicode字符
    private void showTextInputDialog(TextTool textTool) {
        // 创建文本输入对话框
        JDialog dialog = new JDialog();
        dialog.setTitle("Text Tool");
        dialog.setModal(false);
        dialog.setLayout(new BorderLayout());

        // 找到当前窗口并设置相对位置
        if (SwingUtilities.getWindowAncestor(this) != null) {
            dialog.setLocationRelativeTo(SwingUtilities.getWindowAncestor(this));
        } else {
            dialog.setLocationRelativeTo(null); // 居中显示
        }

        // 使用固定的多语言支持字体
        // 这些字体都有很好的Unicode支持
        final Font UNICODE_FONT = new Font("Arial Unicode MS", Font.PLAIN, 14);
        final Font FALLBACK_FONT = new Font("Dialog", Font.PLAIN, 14); // 备用字体

        // 文本输入区域 - 确保支持Unicode
        JTextArea textArea = new JTextArea(5, 20);
        try {
            textArea.setFont(UNICODE_FONT);
        } catch (Exception e) {
            textArea.setFont(FALLBACK_FONT); // 如果首选字体不可用，使用备用字体
        }
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.enableInputMethods(true); // 确保启用输入法

        JScrollPane scrollPane = new JScrollPane(textArea);

        // 简化后的字体大小控制面板
        JPanel fontPanel = new JPanel(new BorderLayout(5, 0));
        JPanel fontControls = new JPanel(new FlowLayout(FlowLayout.LEFT));

        // 字体大小控制
        JLabel fontSizeLabel = new JLabel("Font Size:");
        JTextField fontSizeField = new JTextField(String.valueOf(textTool.getFont().getSize()), 3);

        fontControls.add(fontSizeLabel);
        fontControls.add(fontSizeField);

        // 字体大小变化监听
        fontSizeField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processFontSizeChange(fontSizeField, textTool);
            }
        });

        fontSizeField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                processFontSizeChange(fontSizeField, textTool);
            }
        });

        fontPanel.add(fontControls, BorderLayout.CENTER);

        // 按钮面板
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton okButton = new JButton("OK");
        JButton cancelButton = new JButton("Cancel");

        // 文本区域的keyup事件监听，实时更新预览
        textArea.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updatePreview();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updatePreview();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updatePreview();
            }

            private void updatePreview() {
                textTool.setText(textArea.getText());
                repaint(); // 更新画布上的预览
            }
        });

        // 确定按钮动作
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textTool.setText(textArea.getText());
                textTool.finishEditing();

                // 如果创建了有效的文本对象，则添加到画布
                Shape textShape = textTool.getCreatedShape();
                if (textShape != null && drawingListener != null) {
                    drawingListener.accept(textShape);
                }

                dialog.dispose();
                repaint();
            }
        });

        // 取消按钮动作
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textTool.finishEditing();
                dialog.dispose();
                repaint();
            }
        });

        // 组装对话框
        JPanel controlPanel = new JPanel(new BorderLayout());
        controlPanel.add(fontPanel, BorderLayout.NORTH);

        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);

        dialog.add(scrollPane, BorderLayout.CENTER);
        dialog.add(controlPanel, BorderLayout.NORTH);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.pack();
        dialog.setVisible(true);
    }

    // 修改处理字体大小变更的方法，保持固定字体系列
    private void processFontSizeChange(JTextField fontSizeField, TextTool textTool) {
        try {
            String input = fontSizeField.getText().trim();
            double doubleValue = Double.parseDouble(input);
            int size = (int) Math.round(doubleValue);
            size = Math.max(1, size);
            size = Math.min(size, 72); // 最大字体大小为72

            fontSizeField.setText(String.valueOf(size));

            // 使用固定字体系列，仅改变大小
            Font newFont = new Font("Arial Unicode MS", Font.PLAIN, size);
            textTool.setFont(newFont);
            repaint(); // 更新预览
        } catch (NumberFormatException ex) {
            // 如果输入无效，恢复为当前字体大小
            fontSizeField.setText(String.valueOf(textTool.getFont().getSize()));
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        // 设置抗锯齿
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        // 绘制所有形状
        for (Shape shape : shapes) {
            shape.draw(g2d);
        }

        // 暂时禁用其他用户预览的绘制
        if (enablePreview) {
            Composite originalComposite = g2d.getComposite();
            for (Map.Entry<String, Shape> entry : userPreviews.entrySet()) {
                Shape previewShape = entry.getValue();
                if (previewShape != null) {
                    // 设置透明度
                    g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.6f));
                    previewShape.draw(g2d);
                }
            }
            // 恢复透明度
            g2d.setComposite(originalComposite);
        }

        // 绘制当前正在创建的形状（临时预览）
        if (currentDrawingShape != null) {
            // 使用半透明效果表示这是临时预览
            Composite originalComposite = g2d.getComposite();
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.8f));
            currentDrawingShape.draw(g2d);
            g2d.setComposite(originalComposite);
        }

        // 绘制工具特定的UI元素
        if (currentTool != null) {
            if (currentTool instanceof TextTool) {
                TextTool textTool = (TextTool) currentTool;
                if (textTool.isEditing()) {
                    // 绘制文本预览
                    Shape textShape = textTool.getCreatedShape();
                    if (textShape != null) {
                        textShape.draw(g2d);

                        // 绘制文本光标
                        if (textShape instanceof Text) {
                            Text text = (Text) textShape;
                            Point p = text.getStartPoint();
                            FontMetrics metrics = g2d.getFontMetrics(text.getFont());
                            int textWidth = metrics.stringWidth(text.getText());

                            // 闪烁光标效果
                            if (System.currentTimeMillis() % 1000 < 500) {
                                g2d.setColor(Color.BLACK);
                                g2d.drawLine(p.x + textWidth, p.y - metrics.getAscent(),
                                        p.x + textWidth, p.y + metrics.getDescent());
                            }
                        }
                    }
                }
            } else if (currentTool instanceof EraserTool) {
                // 橡皮擦工具：绘制当前正在创建的擦除路径和位置指示器
                EraserTool eraserTool = (EraserTool) currentTool;
                Point p = eraserTool.getCurrentPoint();
                if (p != null) {
                    int size = eraserTool.getEraserSize();

                    // 绘制半透明的圆形指示器
                    g2d.setColor(new Color(200, 200, 200, 150));
                    g2d.fillOval(p.x - size/2, p.y - size/2, size, size);

                    // 绘制圆形边框
                    g2d.setColor(Color.DARK_GRAY);
                    g2d.setStroke(new BasicStroke(1));
                    g2d.drawOval(p.x - size/2, p.y - size/2, size, size);
                }
            }
        }
    }

    // 设置当前工具
    public void setCurrentTool(DrawingTool tool) {
        logger.info("Switching tool to: " + (tool != null ? tool.getClass().getSimpleName() : "null"));

        // 清除当前绘制的临时形状
        currentDrawingShape = null;
        isDrawing = false;

        this.currentTool = tool;
        repaint();
    }

    // 设置当前颜色
    public void setCurrentColor(Color color) {
        logger.info("Setting color to: " + color);
        this.currentColor = color;

        // 只有在当前工具不是橡皮擦时才更新工具颜色
        if (!(currentTool instanceof EraserTool)) {
            updateToolColor();
        }

        // 通知ToolPanel更新预览
        if (toolPanel != null) {
            toolPanel.updatePreview();
        }
    }

    // 设置当前线宽
    public void setCurrentStrokeWidth(int width) {
        this.currentStrokeWidth = width;
        updateToolStrokeWidth();
    }

    // 设置当前字体
    public void setCurrentFont(Font font) {
        this.currentFont = font;
        if (currentTool instanceof TextTool) {
            currentTool = new TextTool(currentColor, font);
        }
    }

    // 更新工具颜色
    private void updateToolColor() {
    // 橡皮擦不参与颜色更新，直接返回
        if (currentTool instanceof EraserTool) {
            return;
        }

        if (currentTool instanceof LineTool) {
            currentTool = new LineTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof RectangleTool) {
            currentTool = new RectangleTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof OvalTool) {
            currentTool = new OvalTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof TriangleTool) {
            currentTool = new TriangleTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof PencilTool) {
            currentTool = new PencilTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof TextTool) {
            currentTool = new TextTool(currentColor, currentFont);
        }
    }

    // 更新工具线宽
    private void updateToolStrokeWidth() {
        if (currentTool instanceof LineTool) {
            currentTool = new LineTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof RectangleTool) {
            currentTool = new RectangleTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof OvalTool) {
            currentTool = new OvalTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof TriangleTool) {
            currentTool = new TriangleTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof PencilTool) {
            currentTool = new PencilTool(currentColor, currentStrokeWidth);
        } else if (currentTool instanceof EraserTool) {
            // 橡皮擦只更新大小，保持白色
            EraserTool oldEraser = (EraserTool) currentTool;
            int newSize = Math.max((int)Math.round(currentStrokeWidth * 1.25), 8); // 橡皮擦至少8像素

            // 始终使用白色作为橡皮擦颜色
            EraserTool newEraser = new EraserTool(newSize, Color.WHITE);

        // 保持当前位置
        if (oldEraser.getCurrentPoint() != null) {
            newEraser.setCurrentPoint(oldEraser.getCurrentPoint());
        }

        currentTool = newEraser;
    }
    // TextTool不受线宽影响
}

    // 清除画布
    public void clearCanvas() {
        logger.info("Clearing canvas in WhiteboardPanel");
        shapes.clear();
        currentDrawingShape = null; // 也清除临时形状

        // 重置当前工具状态，取消任何正在进行的绘制操作
        if (currentTool != null) {
            // 对于不同类型的工具可能需要不同的处理
            if (currentTool instanceof PencilTool) {
                // 重新创建一个新的同类型工具，保持颜色和线宽不变
                currentTool = new PencilTool(currentColor, currentStrokeWidth);
            } else if (currentTool instanceof LineTool) {
                currentTool = new LineTool(currentColor, currentStrokeWidth);
            } else if (currentTool instanceof RectangleTool) {
                currentTool = new RectangleTool(currentColor, currentStrokeWidth);
            } else if (currentTool instanceof OvalTool) {
                currentTool = new OvalTool(currentColor, currentStrokeWidth);
            } else if (currentTool instanceof TriangleTool) {
                currentTool = new TriangleTool(currentColor, currentStrokeWidth);
            } else if (currentTool instanceof TextTool) {
                Font currentFont = new Font("Arial", Font.PLAIN,
                        toolPanel != null ? toolPanel.getCurrentFontSize() : 14);
                currentTool = new TextTool(currentColor, currentFont);
            } else if (currentTool instanceof EraserTool) {
                EraserTool eraserTool = (EraserTool) currentTool;
                int size = eraserTool.getEraserSize();
                currentTool = new EraserTool(size, Color.WHITE);
            }
        }

        repaint();
        // Log the action
        logger.info("Canvas cleared successfully, shapes count: " + shapes.size());
    }

    // 获取所有形状
    public List<Shape> getShapes() {
        return new ArrayList<>(shapes);
    }

    // 设置形状列表
    public void setShapes(List<Shape> shapes) {
        this.shapes = new ArrayList<>(shapes);
        repaint();
    }

    public void setToolPanel(ToolPanel toolPanel) {
        this.toolPanel = toolPanel;
    }

    /*
     * test methods
     */

    // 临时测试透明度功能，可在初始化后调用或通过特定按键触发
//    private void testTransparency() {
//        // 创建两个重叠的形状
//        Point p1 = new Point(100, 100);
//        Point p2 = new Point(300, 300);
//
//        Rectangle rect = new Rectangle(p1, p2, Color.RED, 2);
//        shapes.add(rect);
//
//        Point p3 = new Point(200, 100);
//        Point p4 = new Point(400, 300);
//
//        Rectangle rect2 = new Rectangle(p3, p4, Color.BLUE, 2);
//        // 设置临时透明度为半透明
//        rect2.setTempAlpha(128);
//        shapes.add(rect2);
//
//        repaint();
//    }

    // getters for current tool and color
    public DrawingTool getCurrentTool() {
        return currentTool;
    }

    public Color getCurrentColor() {
        return currentColor;
    }

    public Font getCurrentFont() {
        return currentFont;
    }

    // Connection related methods
    // 设置绘制监听器
    public void setDrawingListener(Consumer<Shape> listener) {
        this.drawingListener = listener;
    }

    public void addShape(Shape shape) {
        if (shape != null) {
            System.out.println("=== CLIENT SHAPE RECEIVE DEBUG ===");
            System.out.println("Client: Receiving shape " + shape.getClass().getSimpleName() +
                    " ID: " + shape.getId() +
                    " timestamp: " + shape.getTimestamp() +
                    " thread: " + Thread.currentThread().getName());

        // 检查是否已存在相同ID的形状，防止重复添加
        boolean alreadyExists = shapes.stream()
                .anyMatch(existingShape -> existingShape.getId().equals(shape.getId()));

            if (!alreadyExists) {
                System.out.println("Client: Adding new shape, current shapes count: " + shapes.size());

                shapes.add(shape);

            // 按时间戳排序 - 这是关键，确保所有客户端的显示顺序一致
            shapes.sort((s1, s2) -> Long.compare(s1.getTimestamp(), s2.getTimestamp()));

                System.out.println("After sorting - Total shapes: " + shapes.size());

                repaint();
            } else {
                System.out.println("DUPLICATE: Shape with ID " + shape.getId().substring(0, 8) +
                                 "... already exists, skipping");
            }
            System.out.println("=== END CLIENT RECEIVE DEBUG ===");
        }
    }

    public void removeShape(String shapeId) {
        shapes.removeIf(shape -> shape.getId().equals(shapeId));
        repaint();
    }

    // 在 WhiteboardPanel.java 中添加这个方法
    public Consumer<Shape> getDrawingListener() {
        return drawingListener;
    }

}

===== .\src\main\java\com\whiteboard\common\model\DrawOperation.java =====
package com.whiteboard.common.model;

import java.io.Serializable;
import com.whiteboard.client.shapes.Shape;

public class DrawOperation implements Serializable {
    private static final long serialVersionUID = 1L;

    public enum OperationType {
        ADD_SHAPE, REMOVE_SHAPE, CLEAR, UPDATE_SHAPE
    }

    private OperationType type;
    private Shape shape;
    private String sessionId;
    private long timestamp;

    public DrawOperation(OperationType type, Shape shape, String sessionId) {
        this.type = type;
        this.shape = shape;
        this.sessionId = sessionId;
        this.timestamp = System.currentTimeMillis();
    }

    // Getters
    public OperationType getType() {
        return type;
    }

    public Shape getShape() {
        return shape;
    }

    public String getSessionId() {
        return sessionId;
    }

    public long getTimestamp() {
        return timestamp;
    }
}

===== .\src\main\java\com\whiteboard\common\model\User.java =====
package com.whiteboard.common.model;

import java.io.Serializable;

public class User implements Serializable {
    private static final long serialVersionUID = 1L;

    private String uid;         // 系统生成的唯一标识符
    private String username;    // 用户提供的显示名称
    private String sessionId;   // 会话ID
    private boolean isManager;  // 是否为管理员
    private long lastActivity;  // 最后活动时间

    public User(String uid, String username, boolean isManager) {
        this.uid = uid;
        this.username = username;
        this.isManager = isManager;
        this.lastActivity = System.currentTimeMillis();
    }

    // 添加 getter/setter 方法
    public String getUid() {
        return uid;
    }

    public String getUsername() {
        return username;
    }

    public String getSessionId() {
        return sessionId;
    }

    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }

    public boolean isManager() {
        return isManager;
    }

    public long getLastActivity() {
        return lastActivity;
    }

    public void setLastActivity(long lastActivity) {
        this.lastActivity = lastActivity;
    }

    public void updateActivity() {
        this.lastActivity = System.currentTimeMillis();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;

        User other = (User) obj;
        return uid != null ? uid.equals(other.uid) : other.uid == null;
    }

    @Override
    public int hashCode() {
        return uid != null ? uid.hashCode() : 0;
    }
}

===== .\src\main\java\com\whiteboard\common\model\WhiteboardSaveData.java =====
package com.whiteboard.common.model;

import com.whiteboard.client.shapes.Shape;
import java.io.Serializable;
import java.util.List;

public class WhiteboardSaveData implements Serializable {
    private static final long serialVersionUID = 1L;

    public List<Shape> shapes;
    public long version;
    public long timestamp;
    public String createdBy;

    public WhiteboardSaveData() {
    }
}

===== .\src\main\java\com\whiteboard\common\model\WhiteboardState.java =====
package com.whiteboard.common.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.whiteboard.client.shapes.Shape;

public class WhiteboardState implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Shape> shapes;
    private long version;

    public WhiteboardState() {
        shapes = new ArrayList<>();
        version = 0;
    }

    public List<Shape> getShapes() {
        return new ArrayList<>(shapes);
    }

    public void setShapes(List<Shape> shapes) {
        this.shapes = new ArrayList<>(shapes);
        version++;
    }

    public void addShape(Shape shape) {
        shapes.add(shape);
        version++;
    }

    /**
     * 根据ID移除形状
     * @param shapeId 要移除的形状ID
     * @return 是否成功移除
     */
    public boolean removeShape(String shapeId) {
        Iterator<Shape> iterator = shapes.iterator();
        while (iterator.hasNext()) {
            Shape shape = iterator.next();
            if (shape.getId().equals(shapeId)) {
                iterator.remove();
                version++;
                return true;
            }
        }
        return false;
    }

    public void clear() {
        shapes.clear();
        version++;
    }

    public long getVersion() {
        return version;
    }
}

===== .\src\main\java\com\whiteboard\common\remote\IWhiteboardClient.java =====
package com.whiteboard.common.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;
import com.whiteboard.client.shapes.Shape;

public interface IWhiteboardClient extends Remote {
    // 原有方法
    void updateShape(Shape shape) throws RemoteException;
    void removeShape(String shapeId) throws RemoteException;
    void updateUserList(List<String> users) throws RemoteException;
    void receiveMessage(String senderName, String message) throws RemoteException;
    void notifyManagerDecision(boolean approved) throws RemoteException;
    void notifyManagerLeft() throws RemoteException;
    void notifyKicked() throws RemoteException;
    void receiveClearCanvas() throws RemoteException;

    // 新增方法
    void notifyPendingJoinRequest(String username, boolean isOnline) throws RemoteException;
    void notifyServerDisconnected() throws RemoteException;
    void heartbeat() throws RemoteException; // 心跳检测

    // 新增预览回调
    void receivePreviewUpdate(Shape previewShape, String fromUser) throws RemoteException;
    void receivePreviewClear(String fromUser) throws RemoteException;

    void notifyDuplicateUsername(String username) throws RemoteException;
}

===== .\src\main\java\com\whiteboard\common\remote\IWhiteboardServer.java =====
package com.whiteboard.common.remote;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;
import com.whiteboard.client.shapes.Shape;

public interface IWhiteboardServer extends Remote {
    // 修改连接方法
    String connectUser(String username, boolean requestAsManager) throws RemoteException;

    // 其他现有方法保持不变
    boolean approveUser(String username, String managerId) throws RemoteException;
    void disconnectUser(String sessionId) throws RemoteException;
    List<String> getConnectedUsers() throws RemoteException;
    boolean kickUser(String username, String managerId) throws RemoteException;
    boolean isManager(String sessionId) throws RemoteException;
    void addShape(Shape shape, String sessionId) throws RemoteException;
    void removeShape(String shapeId, String sessionId) throws RemoteException;
    void clearCanvas(String sessionId) throws RemoteException;
    List<Shape> getAllShapes() throws RemoteException;
    void registerClient(String sessionId, IWhiteboardClient client) throws RemoteException;
    void unregisterClient(String sessionId) throws RemoteException;
    boolean saveWhiteboard(String filename, String sessionId) throws RemoteException;
    boolean loadWhiteboard(String filename, String sessionId) throws RemoteException;
    void sendChatMessage(String message, String senderSessionId) throws RemoteException;

    // 新增方法
    void requestJoin(String username, String sessionId) throws RemoteException;
    void rejectUser(String username, String managerId) throws RemoteException;
    void updateUserActivity(String sessionId) throws RemoteException;

    // 新增预览方法
    void updatePreview(Shape previewShape, String sessionId) throws RemoteException;
    void clearPreview(String sessionId) throws RemoteException;
}

===== .\src\main\java\com\whiteboard\server\ServerStarter.java =====
package com.whiteboard.server;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.Logger;

import com.whiteboard.common.remote.IWhiteboardServer;

public class ServerStarter {
    private static final Logger logger = Logger.getLogger(ServerStarter.class.getName());

    public static void main(String[] args) {
        try {
            // 可选：设置安全管理器
            // System.setProperty("java.security.policy", "server.policy");
            // if (System.getSecurityManager() == null) {
            //     System.setSecurityManager(new SecurityManager());
            // }

            // 创建服务器实例
            WhiteboardServer server = new WhiteboardServer();

            // 导出远程对象
            IWhiteboardServer stub = (IWhiteboardServer) UnicastRemoteObject.exportObject(server, 0);

            // 创建注册表
            int port = 1099; // 默认RMI端口
            if (args.length > 0) {
                try {
                    port = Integer.parseInt(args[0]);
                } catch (NumberFormatException e) {
                    logger.warning("Invalid port number: " + args[0] + ", using default port 1099");
                }
            }

            Registry registry = LocateRegistry.createRegistry(port);

            // 绑定远程对象
            registry.rebind("WhiteboardServer", stub);

            logger.info("WhiteboardServer running on port " + port);
            System.out.println("WhiteboardServer running on port " + port);
        } catch (Exception e) {
            logger.severe("WhiteboardServer exception: " + e.getMessage());
            System.err.println("WhiteboardServer exception: " + e.getMessage());
            e.printStackTrace();
        }
    }
}

===== .\src\main\java\com\whiteboard\server\UserManager.java =====
package com.whiteboard.server;

import com.whiteboard.common.model.User;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

public class UserManager {
    private static final Logger logger = Logger.getLogger(UserManager.class.getName());

    private String managerId = null;
    private Map<String, User> connectedUsers;       // sessionId -> User
    private Map<String, User> pendingUsers;         // sessionId -> User
    private Map<String, String> sessionToUid;       // sessionId -> uid
    private Map<String, String> usernameToUid;      // username -> uid
    private Set<String> approvedUids;               // 已批准的UID集合

    private final long USER_TIMEOUT_MS = 10000;     // 10秒
    private final long MANAGER_TIMEOUT_MS = 15000;  // 15秒

    public UserManager() {
        connectedUsers = new ConcurrentHashMap<>();
        pendingUsers = new ConcurrentHashMap<>();
        sessionToUid = new ConcurrentHashMap<>();
        usernameToUid = new ConcurrentHashMap<>();
        approvedUids = new HashSet<>();

        // 启动连接监控线程
        startConnectionMonitor();
    }

    /**
     * 连接用户，如果是第一个用户则成为管理员
     * @param username 用户名
     * @return 会话ID，如果用户名冲突则返回null
     */
    public synchronized String connectUser(String username, boolean requestAsManager) {
        logger.info("Connecting user: " + username + ", request as manager: " + requestAsManager);

        // 生成唯一UID
        String uid = UUID.randomUUID().toString();

        // 生成唯一会话ID
        String sessionId = UUID.randomUUID().toString();

        // 处理用户名冲突
        if (usernameToUid.containsKey(username)) {
            String originalUsername = username;
            int suffix = 1;
            while (usernameToUid.containsKey(username)) {
                username = originalUsername + "_" + suffix++;
            }
            logger.info("Username conflict resolved: " + originalUsername + " -> " + username);
        }

        // 确定用户角色
        boolean isManager = requestAsManager && managerId == null;

        User user = new User(uid, username, isManager);
        user.setSessionId(sessionId);

        if (isManager) {
            // 管理员直接连接
            managerId = sessionId;
            connectedUsers.put(sessionId, user);
            sessionToUid.put(sessionId, uid);
            usernameToUid.put(username, uid);
            approvedUids.add(uid);  // 管理员自动批准
            logger.info("Manager connected: " + username + ", UID: " + uid);
        } else {
            // 其他用户需要批准
            pendingUsers.put(sessionId, user);
            sessionToUid.put(sessionId, uid);
            usernameToUid.put(username, uid);
            logger.info("User pending approval: " + username + ", UID: " + uid);
        }

        return sessionId;
    }

    /**
     * 管理员批准用户
     * @param username 要批准的用户名
     * @param managerId 管理员会话ID
     * @return 是否成功批准
     */
    public synchronized boolean approveUser(String username, String managerId) {
        logger.info("Manager " + managerId + " approving user " + username);

        if (!isManager(managerId)) {
            logger.warning("Non-manager attempted to approve user: " + username);
            return false;
        }

        // 查找匹配的待审核用户
        String targetUid = null;
        String pendingSessionId = null;

        for (Map.Entry<String, User> entry : pendingUsers.entrySet()) {
            if (entry.getValue().getUsername().equals(username)) {
                pendingSessionId = entry.getKey();
                targetUid = entry.getValue().getUid();
                break;
            }
        }

        if (pendingSessionId == null || targetUid == null) {
            logger.warning("User not found in pending list: " + username);
            return false;
        }

        User user = pendingUsers.get(pendingSessionId);
        pendingUsers.remove(pendingSessionId);
        connectedUsers.put(pendingSessionId, user);
        approvedUids.add(targetUid);  // 添加到已批准列表

        logger.info("User approved and moved to connected: " + username +
                ", UID: " + targetUid + ", SessionID: " + pendingSessionId);

        return true;
    }

    /**
     * 检查用户是否已被批准
     * @param uid 用户UID
     * @return 是否已批准
     */
    public boolean isApproved(String uid) {
        boolean approved = approvedUids.contains(uid);
        logger.fine("Checking approval status for UID " + uid + ": " + approved);
        return approved;
    }

    /**
     * 从sessionId获取UID
     * @param sessionId 会话ID
     * @return UID
     */
    public String getUidBySessionId(String sessionId) {
        return sessionToUid.get(sessionId);
    }

    /**
     * 根据用户名获取UID
     * @param username 用户名
     * @return UID，如不存在返回null
     */
    public String getUidByUsername(String username) {
        return usernameToUid.get(username);
    }

    /**
     * 移除用户
     * @param sessionId 会话ID
     */
    public synchronized void removeUser(String sessionId) {
        User user = connectedUsers.get(sessionId);

        if (user != null) {
            connectedUsers.remove(sessionId);
            String uid = sessionToUid.get(sessionId);
            sessionToUid.remove(sessionId);
            usernameToUid.remove(user.getUsername());

            // 如果是管理员离开，应用将终止
            if (sessionId.equals(managerId)) {
                managerId = null;
                logger.warning("Manager has left");
            }

            logger.info("User removed: " + user.getUsername() + ", UID: " + uid);
        } else {
            // 检查待审核用户
            user = pendingUsers.get(sessionId);
            if (user != null) {
                pendingUsers.remove(sessionId);
                String uid = sessionToUid.get(sessionId);
                sessionToUid.remove(sessionId);
                usernameToUid.remove(user.getUsername());
                logger.info("Pending user removed: " + user.getUsername() + ", UID: " + uid);
            }
        }
    }

    /**
     * 更新用户活动时间
     * @param sessionId 会话ID
     */
    public void updateUserActivity(String sessionId) {
        User user = connectedUsers.get(sessionId);
        if (user != null) {
            user.updateActivity();
        } else {
            user = pendingUsers.get(sessionId);
            if (user != null) {
                user.updateActivity();
            }
        }
    }

    /**
     * 启动连接监控线程
     */
    private void startConnectionMonitor() {
        Timer timer = new Timer(true);
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                checkConnectionStatus();
            }
        }, 5000, 5000); // 每5秒检查一次
    }

    /**
     * 检查所有用户的连接状态
     */
    private synchronized void checkConnectionStatus() {
        long currentTime = System.currentTimeMillis();
        List<String> sessionsToRemove = new ArrayList<>();

    // 检查管理员状态 - 缩短超时时间
    if (managerId != null) {
        User manager = connectedUsers.get(managerId);
        if (manager != null && (currentTime - manager.getLastActivity()) > 8000) { // 8秒超时
            logger.warning("Manager timeout detected");
            sessionsToRemove.add(managerId);
        }
    }

        // 检查已连接用户
        for (Map.Entry<String, User> entry : connectedUsers.entrySet()) {
            String sessionId = entry.getKey();
            if (sessionId.equals(managerId)) continue; // 跳过管理员

        User user = entry.getValue();
        if ((currentTime - user.getLastActivity()) > 8000) { // 8秒超时
            logger.info("User timeout detected: " + user.getUsername());
            sessionsToRemove.add(sessionId);
        }
    }

    // 检查等待批准的用户
    for (Map.Entry<String, User> entry : pendingUsers.entrySet()) {
        String sessionId = entry.getKey();
        User user = entry.getValue();
        if ((currentTime - user.getLastActivity()) > 8000) { // 8秒超时
            logger.info("Pending user timeout detected: " + user.getUsername());
            sessionsToRemove.add(sessionId);
        }
    }

        // 移除超时用户
        for (String sessionId : sessionsToRemove) {
            removeUser(sessionId);
        }
    }

    /**
     * 检查用户是否为管理员
     * @param sessionId 会话ID
     * @return 是否为管理员
     */
    public boolean isManager(String sessionId) {
        return sessionId != null && sessionId.equals(managerId);
    }

    /**
     * 检查用户是否已连接
     * @param sessionId 会话ID
     * @return 是否已连接
     */
    public boolean isConnectedUser(String sessionId) {
        return connectedUsers.containsKey(sessionId);
    }

    /**
     * 检查用户是否在等待批准
     * @param sessionId 会话ID
     * @return 是否在等待批准
     */
    public boolean isPendingUser(String sessionId) {
        return pendingUsers.containsKey(sessionId);
    }

    /**
     * 获取所有已连接用户名
     * @return 用户名列表
     */
    public List<String> getConnectedUsernames() {
        List<String> usernames = new ArrayList<>();
        for (User user : connectedUsers.values()) {
            usernames.add(user.getUsername());
        }
        return usernames;
    }

    /**
     * 获取所有等待批准的用户名
     * @return 用户名列表
     */
    public List<String> getPendingUsernames() {
        List<String> usernames = new ArrayList<>();
        for (User user : pendingUsers.values()) {
            usernames.add(user.getUsername());
        }
        return usernames;
    }

    /**
     * 通过会话ID获取用户
     * @param sessionId 会话ID
     * @return 用户对象
     */
    public User getUserBySessionId(String sessionId) {
        User user = connectedUsers.get(sessionId);
        if (user == null) {
            user = pendingUsers.get(sessionId);
        }
        return user;
    }

    /**
     * 通过用户名获取用户
     * @param username 用户名
     * @return 用户对象
     */
    public User getUserByUsername(String username) {
        String uid = usernameToUid.get(username);
        if (uid == null) return null;

        // 检查已连接用户
        for (User user : connectedUsers.values()) {
            if (user.getUid().equals(uid)) {
                return user;
            }
        }

        // 检查等待用户
        for (User user : pendingUsers.values()) {
            if (user.getUid().equals(uid)) {
                return user;
            }
        }

        return null;
    }

    /**
     * 获取管理员ID
     * @return 管理员会话ID
     */
    public String getManagerId() {
        return managerId;
    }

    /**
     * 检查用户名是否存在（包括已连接和等待批准的用户）
     * @param username 用户名
     * @return 是否存在
     */
    public boolean isUsernameExists(String username) {
        return usernameToUid.containsKey(username);
    }
}

===== .\src\main\java\com\whiteboard\server\WhiteboardServer.java =====
package com.whiteboard.server;

import com.whiteboard.client.shapes.Shape;
import com.whiteboard.common.model.User;
import com.whiteboard.common.model.WhiteboardState;
import com.whiteboard.common.remote.IWhiteboardClient;
import com.whiteboard.common.remote.IWhiteboardServer;
import com.whiteboard.common.model.WhiteboardSaveData;

import java.io.*;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;
import java.util.Timer;
import java.util.TimerTask;

/**
 * WhiteboardServer类实现了IWhiteboardServer接口，提供了白板的远程服务。
 * 它管理用户连接、绘图操作、文件保存和加载等功能。
 */

public class WhiteboardServer implements IWhiteboardServer {
    private static final Logger logger = Logger.getLogger(WhiteboardServer.class.getName());

    // 状态和用户管理
    private WhiteboardState whiteboardState;
    private UserManager userManager;
    private Map<String, IWhiteboardClient> clientCallbacks;

    // 锁定管理
    private Map<String, String> regionLocks; // 区域ID -> 会话ID
    private static final long LOCK_TIMEOUT_MS = 1000;
    private static final int REGION_SIZE = 50; // 像素

    // 预览状态管理
    private Map<String, Shape> activePreviewsMap = new ConcurrentHashMap<>(); // sessionId -> previewShape
    private Map<String, Long> previewTimestamps = new ConcurrentHashMap<>(); // sessionId -> timestamp

    public WhiteboardServer() {
        whiteboardState = new WhiteboardState();
        userManager = new UserManager();
        clientCallbacks = new ConcurrentHashMap<>();
        regionLocks = new ConcurrentHashMap<>();

        // 启动主动心跳检测
        startActiveHeartbeatCheck();

        // 添加关闭钩子
        addShutdownHook();
    }

    // 用户管理方法实现
    @Override
    public String connectUser(String username, boolean requestAsManager) throws RemoteException {
        logger.info("User connecting: " + username + ", request as manager: " + requestAsManager);

        // 如果请求作为管理员但已有管理员
        if (requestAsManager && userManager.getManagerId() != null) {
            logger.warning("Second manager attempted to connect: " + username);
            return null; // 拒绝连接
        }

        return userManager.connectUser(username, requestAsManager);
    }

    @Override
    public boolean approveUser(String username, String managerId) throws RemoteException {
        logger.info("Manager " + managerId + " approving user: " + username);
        if (!userManager.isManager(managerId)) {
            logger.warning("Non-manager " + managerId + " attempted to approve user: " + username);
            return false;
        }

        // 查找用户并批准
        boolean approved = userManager.approveUser(username, managerId);
        if (!approved) {
            logger.warning("Failed to approve user: " + username);
            return false;
        }

        // 获取用户会话ID
        User user = userManager.getUserByUsername(username);
        if (user == null) {
            logger.warning("Approved user not found: " + username);
            return false;
        }

        String userSessionId = user.getSessionId();
        logger.info("User approved: " + username + ", sessionId: " + userSessionId);

        // 通知用户已批准
        IWhiteboardClient client = clientCallbacks.get(userSessionId);
        if (client == null) {
            // 用户回调尚未注册，将其放入待处理的批准通知队列
            logger.info("Client callback not found for " + username + ", deferring notification");
            // 注: 可以添加队列来处理延迟通知，但这里我们假设客户端会再次发送请求
        } else {
            try {
                client.notifyManagerDecision(true);
                logger.info("Notified user " + username + " of approval");
            } catch (RemoteException e) {
                logger.warning("Error notifying user of approval: " + e.getMessage());
                // 移除可能中断的客户端
                clientCallbacks.remove(userSessionId);
            }
        }

        // 广播更新的用户列表
        broadcastUserList();
        logger.info("User list broadcasted after approval");

        return true;
    }

    @Override
    public void disconnectUser(String sessionId) throws RemoteException {
        logger.info("User disconnecting, session: " + sessionId);

        User user = userManager.getUserBySessionId(sessionId);
        if (user != null) {
            if (user.isManager()) {
                // 如果管理员断开连接，通知所有客户端
                notifyManagerLeft();
                logger.info("Manager left, notifying all clients");
            } else {
                userManager.removeUser(sessionId);
                clientCallbacks.remove(sessionId);
                broadcastUserList();
                logger.info("User removed: " + user.getUsername());
            }
        }
    }

    @Override
    public List<String> getConnectedUsers() throws RemoteException {
        return userManager.getConnectedUsernames();
    }

    @Override
    public boolean kickUser(String username, String managerId) throws RemoteException {
        logger.info("Manager " + managerId + " kicking user: " + username);
        if (userManager.isManager(managerId)) {
            User userToKick = userManager.getUserByUsername(username);
            if (userToKick != null && !userToKick.isManager()) {
                String sessionToKick = userToKick.getSessionId();

                // 通知被踢出的用户
                IWhiteboardClient clientToKick = clientCallbacks.get(sessionToKick);
                if (clientToKick != null) {
                    try {
                        clientToKick.notifyKicked();
                    } catch (RemoteException e) {
                        logger.warning("Error notifying kicked user: " + e.getMessage());
                    }
                }

                // 移除用户
                userManager.removeUser(sessionToKick);
                clientCallbacks.remove(sessionToKick);
                broadcastUserList();
                return true;
            }
        }
        return false;
    }

    // 绘图操作方法实现
    @Override
    public void addShape(Shape shape, String sessionId) throws RemoteException {
    System.out.println("=== SERVER SHAPE ADD DEBUG ===");
    System.out.println("Server: Received shape " + shape.getClass().getSimpleName() +
            " ID: " + shape.getId() +
            " original timestamp: " + shape.getTimestamp() +
            " from session: " + sessionId);

    // 检查用户权限
    if (userManager.isConnectedUser(sessionId)) {
        // 关键修改：服务器统一分配时间戳
        shape.setTimestamp(System.currentTimeMillis());

        System.out.println("Server: Assigned new timestamp: " + shape.getTimestamp());

        // 添加形状到白板状态
        whiteboardState.addShape(shape);

        System.out.println("Server: Broadcasting shape to " + clientCallbacks.size() + " clients");

        // 广播形状给所有客户端（包括发送者，以保证时间戳一致）
        broadcastShapeUpdateToAll(shape);
    }
    System.out.println("=== END SERVER DEBUG ===");
}

    @Override
    public void removeShape(String shapeId, String sessionId) throws RemoteException {
        logger.info("Removing shape: " + shapeId + " from session: " + sessionId);

        // 检查用户权限
        if (userManager.isConnectedUser(sessionId)) {
            // 从白板状态移除形状
            whiteboardState.removeShape(shapeId);

            // 广播移除操作给所有客户端
            for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
                if (!entry.getKey().equals(sessionId)) { // 不需要发回给发送者
                    try {
                        entry.getValue().removeShape(shapeId);
                    } catch (RemoteException e) {
                        logger.warning("Error sending shape removal to client: " + e.getMessage());
                    }
                }
            }
        }
    }

    @Override
    public void clearCanvas(String sessionId) throws RemoteException {
        logger.info("Clearing canvas, requested by session: " + sessionId);

        // Check if user is manager
        if (!userManager.isManager(sessionId)) {
            logger.warning("Non-manager attempted to clear canvas: " + sessionId);
            throw new RemoteException("Only manager can clear canvas");
            // Return early - important!
        }

        // User is manager, proceed with clear operation
        logger.info("Manager authorized to clear canvas, proceeding...");

        // Clear whiteboard state
        whiteboardState.clear();

        // 广播清除命令，带断连检测
        broadcastClearCanvas();
    }

    @Override
    public List<Shape> getAllShapes() throws RemoteException {
        return whiteboardState.getShapes();
    }

    // 客户端注册方法实现
    @Override
    public void registerClient(String sessionId, IWhiteboardClient client) throws RemoteException {
        logger.info("Registering client callback for session: " + sessionId);

        // 验证会话ID
        if (sessionId == null) {
            logger.warning("Attempt to register client with null session ID");
            throw new RemoteException("Invalid session ID");
        }

        // 检查用户是否存在
        User user = userManager.getUserBySessionId(sessionId);
        if (user == null) {
            logger.warning("Unknown user trying to register client: " + sessionId);
            throw new RemoteException("Unknown user");
        }

        boolean isUserManager = userManager.isManager(sessionId);
        boolean isApproved = userManager.isApproved(userManager.getUidBySessionId(sessionId));

        // Register callback for all valid users (including unapproved users)
        clientCallbacks.put(sessionId, client);
        logger.info("Client callback registered for: " + user.getUsername() +
                " (Manager: " + isUserManager + ", Approved: " + isApproved + ")");

        // Only send initial state to managers and approved users
        if (isUserManager || isApproved) {
            sendInitialState(sessionId);
        }

        // Only managers and approved users see the user list
        if (isUserManager || isApproved) {
            // 广播用户列表
            broadcastUserList();
        }
    }


    @Override
    public void unregisterClient(String sessionId) throws RemoteException {
        logger.info("Unregistering client callback for session: " + sessionId);
        clientCallbacks.remove(sessionId);
    }

    // 文件操作方法实现
    @Override
    public boolean saveWhiteboard(String filename, String sessionId) throws RemoteException {
        logger.info("Saving whiteboard to: " + filename);

        if (!userManager.isManager(sessionId)) {
            logger.warning("Non-manager attempted to save: " + sessionId);
            return false;
        }

        try {
            // 确保文件扩展名
            if (!filename.endsWith(".wbd")) {
                filename += ".wbd";
            }

            // 创建保存目录
            File saveDir = new File("whiteboards");
            if (!saveDir.exists()) {
                saveDir.mkdirs();
            }

            File saveFile = new File(saveDir, filename);

            // 保存白板状态
            try (FileOutputStream fileOut = new FileOutputStream(saveFile);
                 ObjectOutputStream out = new ObjectOutputStream(fileOut)) {

                // 创建保存数据对象
                WhiteboardSaveData saveData = new WhiteboardSaveData();
                saveData.shapes = whiteboardState.getShapes();
                saveData.version = whiteboardState.getVersion();
                saveData.timestamp = System.currentTimeMillis();
                saveData.createdBy = userManager.getUserBySessionId(sessionId).getUsername();

                out.writeObject(saveData);
                out.flush();

                logger.info("Whiteboard saved successfully to: " + saveFile.getAbsolutePath());
                return true;
            }
        } catch (IOException e) {
            logger.severe("Error saving whiteboard: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public boolean loadWhiteboard(String filename, String sessionId) throws RemoteException {
        logger.info("Loading whiteboard from: " + filename);

        if (!userManager.isManager(sessionId)) {
            logger.warning("Non-manager attempted to load: " + sessionId);
            return false;
        }

        try {
            // 确保文件扩展名
            if (!filename.endsWith(".wbd")) {
                filename += ".wbd";
            }

            File loadFile = new File("whiteboards", filename);
            if (!loadFile.exists()) {
                logger.warning("File not found: " + loadFile.getAbsolutePath());
                return false;
            }

            // 加载白板状态
            try (FileInputStream fileIn = new FileInputStream(loadFile);
                 ObjectInputStream in = new ObjectInputStream(fileIn)) {

                WhiteboardSaveData saveData = (WhiteboardSaveData) in.readObject();

                // 清除当前状态
                whiteboardState.clear();

                // 设置新状态
                for (Shape shape : saveData.shapes) {
                    whiteboardState.addShape(shape);
                }

                logger.info("Whiteboard loaded successfully from: " + loadFile.getAbsolutePath());
                logger.info("Loaded " + saveData.shapes.size() + " shapes, created by: " + saveData.createdBy);

                // 广播清除和新状态给所有客户端
                broadcastFullReload();

                return true;
            }
        } catch (IOException | ClassNotFoundException e) {
            logger.severe("Error loading whiteboard: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    // 聊天功能实现
    @Override
    public void sendChatMessage(String message, String senderSessionId) throws RemoteException {
        logger.info("Chat message from session: " + senderSessionId);

        // 检查用户权限
        if (userManager.isConnectedUser(senderSessionId)) {
            User sender = userManager.getUserBySessionId(senderSessionId);
            String senderName = sender.getUsername();

            // 广播消息给所有客户端
            for (IWhiteboardClient client : clientCallbacks.values()) {
                try {
                    client.receiveMessage(senderName, message);
                } catch (RemoteException e) {
                    logger.warning("Error sending chat message to client: " + e.getMessage());
                }
            }
        }
    }

    // 辅助方法
    private void broadcastUserList() {
        List<String> usernames = userManager.getConnectedUsernames();
        logger.info("Broadcasting user list: " + usernames);

        // 创建副本避免并发修改异常
        Map<String, IWhiteboardClient> clients = new HashMap<>(clientCallbacks);
        List<String> disconnectedClients = new ArrayList<>();

        for (Map.Entry<String, IWhiteboardClient> entry : clients.entrySet()) {
            String sessionId = entry.getKey();
            IWhiteboardClient client = entry.getValue();

            try {
                // 设置较短的超时时间来快速检测断连
                client.updateUserList(usernames);
            } catch (RemoteException e) {
                logger.warning("Client disconnected during broadcast: " + sessionId + ", error: " + e.getMessage());
                disconnectedClients.add(sessionId);
            }
        }

        // 清理断开连接的客户端
        for (String sessionId : disconnectedClients) {
            handleClientDisconnection(sessionId);
        }
    }

    private void notifyManagerLeft() {
        for (IWhiteboardClient client : clientCallbacks.values()) {
            try {
                client.notifyManagerLeft();
            } catch (RemoteException e) {
                logger.warning("Error notifying clients that manager left: " + e.getMessage());
            }
        }
    }

    /**
     * 通知用户已被管理员批准
     * @param username 被批准的用户名
     */
    private void notifyUserApproved(String username) {
        // 找到用户的会话ID
        String userSessionId = null;
        for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
            User user = userManager.getUserBySessionId(entry.getKey());
            if (user != null && user.getUsername().equals(username)) {
                userSessionId = entry.getKey();
                break;
            }
        }

        if (userSessionId != null) {
            IWhiteboardClient client = clientCallbacks.get(userSessionId);
            if (client != null) {
                try {
                    client.notifyManagerDecision(true); // true表示被批准
                    logger.info("Notified user " + username + " that they were approved");
                } catch (RemoteException e) {
                    logger.warning("Error notifying user of approval: " + e.getMessage());
                }
            }
        }
    }

    /**
     * 发送初始白板状态给新连接的客户端
     * @param sessionId 客户端会话ID
     */
    private void sendInitialState(String sessionId) {
        IWhiteboardClient client = clientCallbacks.get(sessionId);
        if (client == null) {
            logger.warning("Cannot send initial state - client not registered: " + sessionId);
            return;
        }

        try {
            // 发送所有现有形状
            List<Shape> shapes = whiteboardState.getShapes();
            logger.info("Sending initial state to " + sessionId + ": " + shapes.size() + " shapes");

            for (Shape shape : shapes) {
                client.updateShape(shape);
            }

            // 发送用户列表
            List<String> users = userManager.getConnectedUsernames();
            client.updateUserList(users);

            logger.info("Initial state sent successfully to: " + sessionId);
        } catch (RemoteException e) {
            logger.warning("Error sending initial state to client: " + e.getMessage());
            clientCallbacks.remove(sessionId);
        }
    }


    // 并发控制方法
    private String calculateRegionId(int x, int y) {
        int regionX = x / REGION_SIZE;
        int regionY = y / REGION_SIZE;
        return regionX + ":" + regionY;
    }

    /**
     * 处理用户加入请求
     */
    @Override
    public void requestJoin(String username, String sessionId) throws RemoteException {
        logger.info("Join request from user: " + username + ", session: " + sessionId);

        // 更新用户活动时间
        userManager.updateUserActivity(sessionId);

    // 获取用户UID
    String uid = userManager.getUidBySessionId(sessionId);
    if (uid == null) {
        logger.warning("Session not found: " + sessionId);

        // 通知客户端会话无效
        IWhiteboardClient client = clientCallbacks.get(sessionId);
        if (client != null) {
            try {
                client.notifyDuplicateUsername(username);
            } catch (RemoteException e) {
                logger.warning("Error notifying invalid session: " + e.getMessage());
            }
            clientCallbacks.remove(sessionId);
        }
        return;
    }

    // 检查真正的重名用户（使用真实用户名，不是修改后的用户名）
    User currentUser = userManager.getUserBySessionId(sessionId);
    if (currentUser != null && !currentUser.getUsername().equals(username)) {
        // 说明用户名被自动修改了，但是用户仍在使用原始用户名请求
        logger.warning("Username mismatch detected: requested=" + username +
                      ", actual=" + currentUser.getUsername());

        IWhiteboardClient client = clientCallbacks.get(sessionId);
        if (client != null) {
            try {
                client.notifyDuplicateUsername(username);
            } catch (RemoteException e) {
                logger.warning("Error notifying username mismatch: " + e.getMessage());
            }
        }

        userManager.removeUser(sessionId);
        clientCallbacks.remove(sessionId);
        return;
    }

        // 检查是否已批准
        if (userManager.isApproved(uid)) {
            // 已批准用户，直接通知
            IWhiteboardClient client = clientCallbacks.get(sessionId);
            if (client != null) {
                try {
                    client.notifyManagerDecision(true);
                } catch (RemoteException e) {
                    logger.warning("Error notifying approved user: " + e.getMessage());
                }
            }
            return;
        }

        // 正常处理加入请求
        if (!userManager.isPendingUser(sessionId)) {
            logger.warning("User not in pending list: " + sessionId);
            return;
        }

    notifyManagerAboutPendingUser(currentUser.getUsername()); // 使用真实用户名
}

    /**
     * 通知管理员有新用户请求加入
     */
    private void notifyManagerAboutPendingUser(String username) {
        String managerId = userManager.getManagerId();
        if (managerId == null) {
            logger.warning("No manager available to notify about pending user: " + username);
            return;
        }

        IWhiteboardClient managerClient = clientCallbacks.get(managerId);
        if (managerClient == null) {
            logger.warning("Manager client callback not found, cannot notify about: " + username);
            return;
        }

        try {
            // 检查用户是否在线
            User user = userManager.getUserByUsername(username);
            boolean isOnline = (user != null &&
                    (System.currentTimeMillis() - user.getLastActivity()) <= 10000);

            managerClient.notifyPendingJoinRequest(username, isOnline);
            logger.info("Notified manager about pending user: " + username + " (online: " + isOnline + ")");
        } catch (RemoteException e) {
            logger.warning("Failed to notify manager about pending user: " + e.getMessage());
            // 考虑从回调列表中移除断开的管理员
            if (e.getCause() instanceof java.net.ConnectException) {
                clientCallbacks.remove(managerId);
                logger.warning("Removed disconnected manager from callbacks");
            }
        }
    }

    /**
     * 拒绝用户加入请求
     */
    @Override
    public void rejectUser(String username, String managerId) throws RemoteException {
        logger.info("Manager " + managerId + " rejecting user: " + username);

        if (!userManager.isManager(managerId)) {
            logger.warning("Non-manager attempted to reject user: " + username);
            return;
        }

        // 查找用户会话
        User user = userManager.getUserByUsername(username);
        if (user != null && userManager.isPendingUser(user.getSessionId())) {
            // 通知用户被拒绝
            IWhiteboardClient client = clientCallbacks.get(user.getSessionId());
            if (client != null) {
                try {
                    client.notifyManagerDecision(false);
                    logger.info("Notified user of rejection: " + username);
                } catch (RemoteException e) {
                    logger.warning("Error notifying rejected user: " + e.getMessage());
                }
            }

            // 从等待列表移除用户
            userManager.removeUser(user.getSessionId());
        }
    }

    /**
     * 更新用户活动时间
     */
    @Override
    public void updateUserActivity(String sessionId) throws RemoteException {
        userManager.updateUserActivity(sessionId);
    }

    // 启动服务器
    public static void main(String[] args) {
        try {
            // 创建服务器实例
            WhiteboardServer server = new WhiteboardServer();

            // 导出远程对象
            IWhiteboardServer stub = (IWhiteboardServer) UnicastRemoteObject.exportObject(server, 0);

            // 创建注册表
            int port = 1099; // 默认RMI端口
            if (args.length > 0) {
                port = Integer.parseInt(args[0]);
            }
            Registry registry = LocateRegistry.createRegistry(port);

            // 绑定远程对象
            registry.rebind("WhiteboardServer", stub);

            logger.info("WhiteboardServer running on port " + port);
        } catch (Exception e) {
            logger.severe("WhiteboardServer exception: " + e.getMessage());
            e.printStackTrace();
        }
    }
    @Override
    public boolean isManager(String sessionId) throws RemoteException {
        return userManager.isManager(sessionId);
    }

    /**
     * 在服务器关闭前通知所有客户端
     */
    private void addShutdownHook() {
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            notifyServerShutdown();
        }));
    }

    /**
     * 通知所有客户端服务器将要关闭
     */
    private void notifyServerShutdown() {
        logger.info("Server shutting down, notifying all clients");

        for (IWhiteboardClient client : clientCallbacks.values()) {
            try {
                client.notifyServerDisconnected();
            } catch (RemoteException e) {
                // 忽略关闭时的异常
            }
        }
    }

    // 客户端断连处理方法
    private void handleClientDisconnection(String sessionId) {
        logger.info("Handling client disconnection: " + sessionId);

        // 从回调列表移除
        clientCallbacks.remove(sessionId);

        // 从用户管理器移除
        User disconnectedUser = userManager.getUserBySessionId(sessionId);
        if (disconnectedUser != null) {
            logger.info("Removing disconnected user: " + disconnectedUser.getUsername());
            userManager.removeUser(sessionId);

            // 如果是管理员断开，通知所有客户端
            if (disconnectedUser.isManager()) {
                notifyManagerLeft();
            } else {
                // 重新广播用户列表（不包含断开的用户）
                broadcastUserList();
            }
        }
    }

    private void broadcastShapeUpdate(Shape shape) {
        Map<String, IWhiteboardClient> clients = new HashMap<>(clientCallbacks);
        List<String> disconnectedClients = new ArrayList<>();

        for (Map.Entry<String, IWhiteboardClient> entry : clients.entrySet()) {
            String sessionId = entry.getKey();
            IWhiteboardClient client = entry.getValue();

            try {
                client.updateShape(shape);
                logger.fine("Successfully broadcasted shape to client: " + sessionId);
            } catch (RemoteException e) {
                logger.warning("Client disconnected during shape broadcast: " + sessionId);
                disconnectedClients.add(sessionId);
            }
        }

        // 清理断开连接的客户端
        for (String sessionId : disconnectedClients) {
            handleClientDisconnection(sessionId);
        }
    }

    // 带断连检测的清除广播方法
    private void broadcastClearCanvas() {
        Map<String, IWhiteboardClient> clients = new HashMap<>(clientCallbacks);
        List<String> disconnectedClients = new ArrayList<>();

        for (Map.Entry<String, IWhiteboardClient> entry : clients.entrySet()) {
            String sessionId = entry.getKey();
            IWhiteboardClient client = entry.getValue();

            try {
                logger.info("Sending clear canvas to client: " + sessionId);
                client.receiveClearCanvas();
                logger.info("Successfully sent clear canvas to: " + sessionId);
            } catch (RemoteException e) {
                logger.warning("Client disconnected during clear broadcast: " + sessionId);
                disconnectedClients.add(sessionId);
            }
        }

        // 清理断开连接的客户端
        for (String sessionId : disconnectedClients) {
            handleClientDisconnection(sessionId);
        }
    }

    private void performActiveHeartbeatCheck() {
        Map<String, IWhiteboardClient> clients = new HashMap<>(clientCallbacks);
        List<String> disconnectedClients = new ArrayList<>();

        for (Map.Entry<String, IWhiteboardClient> entry : clients.entrySet()) {
            String sessionId = entry.getKey();
            IWhiteboardClient client = entry.getValue();

            try {
                // 主动发送心跳检测
                client.heartbeat();
                logger.fine("Heartbeat response received from: " + sessionId);
            } catch (RemoteException e) {
                logger.warning("Client failed heartbeat check: " + sessionId);
                disconnectedClients.add(sessionId);
            }
        }

        // 处理断开连接的客户端
        for (String sessionId : disconnectedClients) {
            handleClientDisconnection(sessionId);
        }
    }

    private void startActiveHeartbeatCheck() {
        Timer activeHeartbeatTimer = new Timer(true);
        activeHeartbeatTimer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                performActiveHeartbeatCheck();
            }
        }, 10000, 10000); // 每10秒进行一次主动检测
    }

    private void broadcastFullReload() {
        logger.info("Broadcasting full whiteboard reload to all clients");

        for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
            try {
                // 先清除
                entry.getValue().receiveClearCanvas();

                // 再发送所有形状
                List<Shape> shapes = whiteboardState.getShapes();
                for (Shape shape : shapes) {
                    entry.getValue().updateShape(shape);
                }

                logger.info("Sent full reload to client: " + entry.getKey());
            } catch (RemoteException e) {
                logger.warning("Error sending full reload to client: " + e.getMessage());
            }
        }
    }

    @Override
    public void updatePreview(Shape previewShape, String sessionId) throws RemoteException {
        if (!userManager.isConnectedUser(sessionId)) {
            return;
        }

        // 记录预览和时间戳
        activePreviewsMap.put(sessionId, previewShape);
        previewTimestamps.put(sessionId, System.currentTimeMillis());

        // 获取用户名
        User user = userManager.getUserBySessionId(sessionId);
        String username = user.getUsername();

        // 广播预览给其他客户端（不包括发送者）
        for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
            if (!entry.getKey().equals(sessionId)) { // 不发送给自己
                try {
                    entry.getValue().receivePreviewUpdate(previewShape, username);
                } catch (RemoteException e) {
                    logger.warning("Error sending preview update: " + e.getMessage());
                }
            }
        }
    }

    @Override
    public void clearPreview(String sessionId) throws RemoteException {
        if (!userManager.isConnectedUser(sessionId)) {
            return;
        }

        // 清除预览记录
        activePreviewsMap.remove(sessionId);
        previewTimestamps.remove(sessionId);

        // 获取用户名
        User user = userManager.getUserBySessionId(sessionId);
        String username = user.getUsername();

        // 广播清除预览给其他客户端
        for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
            if (!entry.getKey().equals(sessionId)) {
                try {
                    entry.getValue().receivePreviewClear(username);
                } catch (RemoteException e) {
                    logger.warning("Error sending preview clear: " + e.getMessage());
                }
            }
        }
    }

    /// 添加检查用户名是否已连接的方法
    private boolean isUsernameAlreadyConnected(String username, String excludeSessionId) {
        // 检查已连接用户
        for (Map.Entry<String, IWhiteboardClient> entry : clientCallbacks.entrySet()) {
            if (!entry.getKey().equals(excludeSessionId)) {
                User user = userManager.getUserBySessionId(entry.getKey());
                if (user != null && user.getUsername().equals(username) &&
                        userManager.isConnectedUser(entry.getKey())) {
                    return true;
                }
            }
        }
        return false;
    }

    private void broadcastShapeUpdateToAll(Shape shape) {
        Map<String, IWhiteboardClient> clients = new HashMap<>(clientCallbacks);
        List<String> disconnectedClients = new ArrayList<>();

        for (Map.Entry<String, IWhiteboardClient> entry : clients.entrySet()) {
            String sessionId = entry.getKey();
            IWhiteboardClient client = entry.getValue();

            try {
                client.updateShape(shape);
                logger.fine("Successfully broadcasted shape to client: " + sessionId);
            } catch (RemoteException e) {
                logger.warning("Client disconnected during shape broadcast: " + sessionId);
                disconnectedClients.add(sessionId);
            }
        }

        // 清理断开连接的客户端
        for (String sessionId : disconnectedClients) {
            handleClientDisconnection(sessionId);
        }
    }
}

===== .\src\test\java\com\whiteboard\client\ShapeTest.java =====
package com.whiteboard.client;

public class ShapeTest {
}


===== .\src\test\java\com\whiteboard\client\TestShape.java =====
// 临时测试文件
package com.whiteboard.client;

import com.whiteboard.client.shapes.Line;
import java.awt.Color;
import java.awt.Point;

public class TestShape {
    public static void main(String[] args) {
        Line line = new Line(new Point(0,0), new Point(10,10), Color.BLACK, 2);
        System.out.println("Shape has timestamp: " + line.getTimestamp());
        System.out.println("Timestamp value: " + line.getTimestamp());
    }
}

===== .\src\test\java\com\whiteboard\server\ServerTest.java =====
package com.whiteboard.server;

public class ServerTest {
}
